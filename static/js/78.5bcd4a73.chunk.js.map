{"version":3,"file":"static/js/78.5bcd4a73.chunk.js","mappings":"iKAoBIA,EAAOC,EAAQC,EAAOC,EACVC,EAEZC,EAAWC,EAAOC,EAClBC,EAAWC,EAEXC,EAAOC,EAEPC,E,2OAEAC,EAAW,CAAC,SAAU,UAAW,QAAS,UAAW,UAEzDb,EAAQ,IAAIc,EAAAA,IAEZN,EAAY,CACR,KAAQ,CAAEO,MAAO,KAGrBN,EAAY,CACR,KAAQ,CAAEM,MAAO,GACjB,aAAgB,CAAEA,OAAO,IAAID,EAAAA,KAAsBE,KAAM,2BAGpC,aAAGD,MAAME,MAAQR,EAAyB,aAAGM,MAAMG,MAAQJ,EAAAA,IAEpF,IA0GMK,EAAc,CAChB,EAAK,CAAC,EAAG,EAAG,GACZ,EAAK,CAAC,EAAG,EAAG,GACZ,EAAK,CAAC,EAAG,EAAG,IAsjBhB,EAljBqB,WAGjB,IAAMC,GAAcC,EAAAA,EAAAA,QAAO,MACrBC,GAAkBD,EAAAA,EAAAA,QAAO,MAG/BE,GAA8BC,EAAAA,EAAAA,UAAS,CAAC,EAAG,EAAG,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAsCL,EAAAA,EAAAA,UAAS,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAEjDE,GAFkBD,EAAA,GAAgBA,EAAA,IAEAN,EAAAA,EAAAA,UAAS,IAAEQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAtCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0CX,EAAAA,EAAAA,UAAS,GAAEY,GAAAV,EAAAA,EAAAA,GAAAS,EAAA,GAA9CE,EAAaD,EAAA,GAGpBE,IAHsCF,EAAA,IAGdZ,EAAAA,EAAAA,WAAS,IAAMe,IAAAb,EAAAA,EAAAA,GAAAY,GAAA,GAAhCE,GAAID,GAAA,GAAEE,GAAOF,GAAA,GACpBG,IAAsClB,EAAAA,EAAAA,WAAS,GAAMmB,IAAAjB,EAAAA,EAAAA,GAAAgB,GAAA,GAA9CE,GAAWD,GAAA,GAAEE,GAAcF,GAAA,GAGlCG,IAAgCtB,EAAAA,EAAAA,UAAS,EAAC,GAAM,GAAM,GAAM,GAAM,IAAMuB,IAAArB,EAAAA,EAAAA,GAAAoB,GAAA,GAAjEE,GAAQD,GAAA,GAAEE,GAAWF,GAAA,GAC5BG,GAAeC,EAAAA,EAAAA,UAARC,IAAsB1B,EAAAA,EAAAA,GAAAwB,GAAA,GAAlB,GACXG,IAAkC7B,EAAAA,EAAAA,UAAS,OAAM8B,IAAA5B,EAAAA,EAAAA,GAAA2B,GAAA,GAA1CE,GAASD,GAAA,GAAEE,GAAYF,GAAA,GAC9BG,IAAoCjC,EAAAA,EAAAA,UAAS,4EAAekC,IAAAhC,EAAAA,EAAAA,GAAA+B,GAAA,GAArDE,GAAUD,GAAA,GAAEE,GAAaF,GAAA,GAEhCG,IAA4BrC,EAAAA,EAAAA,UAAS,eAAcsC,IAAApC,EAAAA,EAAAA,GAAAmC,GAAA,GAA5CE,GAAMD,GAAA,GAAEE,GAASF,GAAA,GACxBG,IAA8BzC,EAAAA,EAAAA,UAAS,6BAA4B0C,IAAAxC,EAAAA,EAAAA,GAAAuC,GAAA,GAA5DE,GAAOD,GAAA,GAAEE,GAAUF,GAAA,GAC1BG,IAA0B7C,EAAAA,EAAAA,UAAS,iBAAgB8C,IAAA5C,EAAAA,EAAAA,GAAA2C,GAAA,GAA5CE,GAAKD,GAAA,GAAEE,GAAQF,GAAA,GACtBG,IAA8BjD,EAAAA,EAAAA,UAAS,sBAAqBkD,IAAAhD,EAAAA,EAAAA,GAAA+C,GAAA,GAArDE,GAAOD,GAAA,GAAEE,GAAUF,GAAA,GAEpBG,GAAgB,SAACC,EAAOC,EAAOC,GACjC,IAAIC,EAAQ,IAAKC,EAAS,IACtBC,EAASC,SAASC,cAAc,UACpCF,EAAOF,MAAQA,EACfE,EAAOD,OAASA,EAChB,IAAII,EAAMH,EAAOI,WAAW,MAW5B,OATAD,EAAIE,UAAYjC,GAChB+B,EAAIG,SAAS,EAAG,EAAGR,EAAOC,GAC1BI,EAAII,KAAO,cACXJ,EAAIE,UAAY,QAChBF,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,SAASf,EAAOG,IAASC,EAAO,KACpCI,EAAIO,SAASd,EAAOE,IAASC,EAAO,KACpCI,EAAIO,SAASb,EAAOC,IAASC,EAAO,KAC7BC,CACX,EAEMW,GAAiB,SAAC/E,GACpB,IAAIkE,EAAM,IAAKC,EAAO,IAClBC,EAASC,SAASC,cAAc,UACpCF,EAAOF,MAAQA,EACfE,EAAOD,OAASA,EAChB,IAAII,EAAMH,EAAOI,WAAW,MAQ5B,OAPAD,EAAIE,UAAYjC,GAChB+B,EAAIG,SAAS,EAAG,EAAGR,EAAOC,GAC1BI,EAAIS,UAAUhF,EAAOkE,GAASC,GAAUD,IAASC,KACjDI,EAAIU,YAAc,QAClBV,EAAIW,UAAY,EAChBX,EAAIY,WAAWjB,GAASC,GAAUD,IAASC,KAEpCC,CACX,EAEMgB,GAAiB,SAACC,GACpB,IACIjB,EAASC,SAASC,cAAc,UACpCF,EAAOF,MAFK,IAGZE,EAAOD,OAHmB,IAI1B,IAAII,EAAMH,EAAOI,WAAW,MAQ5B,OAPAD,EAAIE,UAAYjC,GAChB+B,EAAIG,SAAS,EAAG,EANJ,IAAc,KAO1BH,EAAII,KAAO,cACXJ,EAAIE,UAAY,QAChBF,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,SAASO,EAAMnB,IAASC,KACrBC,CACX,EAgCMkB,GAAO,SAACC,GACV,IAAIC,EAAcD,EAAWE,WAAWA,WAAWD,YAC/CE,EAAeH,EAAWE,WAAWA,WAAWC,cACpDxG,EAAS,IAAIa,EAAAA,IAAyB,GAAI4F,OAAOC,WAAaD,OAAOE,YAAa,EAAG,MAC9EC,OAAO,EAAG,EAAG,GACpB5G,EAAO6G,SAASC,EAAI,EACpB9G,EAAO6G,SAASE,EAAI,EACvB/G,EAAO6G,SAASG,EAAI,EACjBhH,EAAOiH,OAASX,EAAcE,EAC9BxG,EAAOkH,0BAEPjH,EAAQ,IAAIY,EAAAA,KACNsG,WAAa,IAAItG,EAAAA,IAAa,WAKpCV,EAAa,IAAIU,EAAAA,IAAgB,SAAU,IAChCgG,SAASO,IAAI,EAAG,EAAG,GAC9BjH,EAAWkH,YAAa,EACxBpH,EAAMqH,IAAInH,GAjDVG,GAAQiH,EAAAA,EAAAA,GAAO1G,EAAAA,KAAiB2G,EAAAA,EAAAA,GAAK9F,IACrCtB,EAAY,CACR,IAAIS,EAAAA,IAAyB,CACzB4G,IAAK,IAAI5G,EAAAA,IAAoBqF,GAAexC,OAEhD,IAAI7C,EAAAA,IAAyB,CACzB4G,IAAK,IAAI5G,EAAAA,IAAoBqF,GAAexC,OAEhD,IAAI7C,EAAAA,IAAwB,CACxB6G,MAAOpE,KAEX,IAAIzC,EAAAA,IAAyB,CAAE6G,MAAOpE,KACtC,IAAIzC,EAAAA,IAAyB,CACzB4G,IAAK,IAAI5G,EAAAA,IAAoBqF,GAAepC,OAEhD,IAAIjD,EAAAA,IAAyB,CACzB4G,IAAK,IAAI5G,EAAAA,IAAoB+D,GAAcV,GAASI,GAAOI,QAGnEiD,MAEAtH,EAAQ,IAAIQ,EAAAA,IAAYP,EAAUF,IAC5ByG,SAASC,EAAI,EACnBzG,EAAMwG,SAASE,EAAI,EACnB1G,EAAMwG,SAASG,EAAI,EACnB3G,EAAMgH,YAAa,EACnBpH,EAAMqH,IAAKjH,IA+CXH,EAAW,IAAIW,EAAAA,IAAoB,CAC/B+G,WAAW,KAENC,QAASvB,EAAaE,GAC/BtG,EAAS4H,cAAerB,OAAOsB,kBAC/B7H,EAAS8H,UAAUC,SAAU,EACzB5B,IACAA,EAAW6B,UAAY,GACvB7B,EAAW8B,YAAajI,EAASkI,aAErC/B,EAAW8B,YAAajI,EAASkI,YAEjC,IAAMC,EAAW,IAAIC,EAAAA,EAAetI,EAAQE,EAASkI,YACrDC,EAASE,YAAa,EACtBF,EAASG,YAAc,EACvBH,EAASI,YAAc,GACvBJ,EAASK,OAAOtB,IAAK,EAAG,EAAG,GAC3BiB,EAASM,SAETlC,OAAOmC,iBAAkB,SAAUC,IACnCC,IACJ,EAEMD,GAAiB,WACnB,IAAME,EAAW5H,EAAY6H,QACzB1C,EAAcyC,EAASxC,WAAWA,WAAWD,YAC7CE,EAAeuC,EAASxC,WAAWA,WAAWC,aAClDxG,EAAOiH,OAASX,EAAcE,EAC9BxG,EAAOkH,yBACPhH,EAAS2H,QAASvB,EAAaE,EAEnC,EAEMsC,GAAU,SAAVA,IACFG,sBAAuBH,GACvBI,IACJ,EAEMA,GAAS,WACX,IAAMC,EAAQpJ,EAAMqJ,WACpB7I,EAAiB,KAAGO,OAAiB,EAARqI,EAC7B3I,EAAiB,KAAGM,MAAQf,EAAMsJ,YAMlCnJ,EAASgJ,OAAQjJ,EAAOD,EAC5B,EAwGM2H,GAAe,SAAC2B,GAElBC,EAAAA,UAAiBD,GAAKA,EAAEZ,QAAUY,EAAEZ,OAAO5H,OAAS,4BAA6B,CAC7E0I,KAAM,YACNC,QAAS,GACTzE,MAAO,IACPC,OAAQ,IACRyE,qBAAsB,IACtBC,OAAQ,EACRjC,MAAO,CACHkC,KAAM,UACNC,MAAOvG,MAGdwG,MAAK,SAAAC,IACFtJ,EAAQ,IAAIuJ,OACNC,IAAMF,EACZtJ,EAAMyJ,OAAS,WACXxJ,EAAO,IAAIG,EAAAA,IAAoBgF,GAAepF,IAC9CL,EAAU,GAAGqH,IAAM/G,CACvB,CAEJ,GACJ,EAyDA,OAjDAyJ,EAAAA,EAAAA,YAAU,WACN,IAAMpB,EAAW5H,EAAY6H,QAE7B,OADA5C,GAAK2C,GACE,WACHA,EAASb,UAAY,EACzB,CACJ,GAAG,KAEHiC,EAAAA,EAAAA,YAAU,WACN/J,EAAU,GAAK,IAAIS,EAAAA,IAAyB,CACxC4G,IAAK,IAAI5G,EAAAA,IAAoBqF,GAAexC,OAEhDtD,EAAU,GAAK,IAAIS,EAAAA,IAAyB,CACxC4G,IAAK,IAAI5G,EAAAA,IAAoBqF,GAAexC,OAEhDtD,EAAU,GAAK,IAAIS,EAAAA,IAAyB,CAAE6G,MAAOpE,KACrDlD,EAAU,GAAK,IAAIS,EAAAA,IAAyB,CACxC4G,IAAK,IAAI5G,EAAAA,IAAoBqF,GAAepC,OAEhD1D,EAAU,GAAK,IAAIS,EAAAA,IAAyB,CACxC4G,IAAK,IAAI5G,EAAAA,IAAoB+D,GAAcV,GAASI,GAAOI,OAI9D6E,EAAAA,UAAiB,4BAA6B,CAC3CC,KAAM,YACNC,QAAS,GACTzE,MAAO,IACPC,OAAQ,IACRyE,qBAAsB,IACtBC,OAAQ,EACRjC,MAAO,CACHkC,KAAM,UACNC,MAAOvG,MAGdwG,MAAK,SAAAC,IACFtJ,EAAQ,IAAIuJ,OACNC,IAAMF,EACZtJ,EAAMyJ,OAAS,WACX9J,EAAU,GAAK,IAAIS,EAAAA,IAAyB,CACxC4G,IAAK,IAAI5G,EAAAA,IAAoBgF,GAAepF,KAEpD,CAEJ,GAEJ,GAAG,CAAC6C,GAAWY,GAASI,GAAOI,GAASZ,MAEjCsG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACDC,MAAM,oBACNC,UAAW,CACPC,SAAU,OACVjF,UAAW,OACXgC,MAAO,UACPkD,OAAQ,QAEZC,MAAO,CACH7F,MAAO,IACPC,OAAQ,IACR2F,OAAQ,QAEZE,OACIP,EAAAA,EAAAA,KAACQ,EAAAA,EAAO,CAACN,MAAM,oBAAoB/C,MAAO,UAAU4C,UAChDC,EAAAA,EAAAA,KAACS,EAAAA,GAAM,CAACC,MAAMV,EAAAA,EAAAA,KAACW,EAAAA,EAAc,IAAKC,QApLxC,WACdvI,IAAe,GACf,IAAMwI,EAAe/J,EAAgB2H,QAC/BD,EAAW5H,EAAY6H,QACaD,EAASxC,WACnD5F,EAAWoI,EAASxC,WACpB6E,EAAajD,YAAYY,EAE7B,MA+KgBsC,QAAS,EACLd,EAAAA,EAAAA,KAAA,KAAGM,MAAO,CAACnD,MAAO,UAAWiD,SAAU,QAAQL,SAAC,kBAGlDA,UAEFC,EAAAA,EAAAA,KAAA,OAAKe,IAAKnK,SAIlBoJ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACtBC,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CACDC,iBAAiB,IACjBC,MAAO,CACH,CACIC,IAAK,IACLC,OAAOvB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EACjBC,EAAAA,EAAAA,KAACqB,EAAAA,EAAmB,KACpBrB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBAEfA,UAAUC,EAAAA,EAAAA,KAACsB,EAAAA,GAAI,CACHC,UAAQ,EACRC,KAAK,QACLlB,MAAO,CAACnF,UAAW,OAAQsG,UAAW,cACtCC,QAAQ1B,EAAAA,EAAAA,KAAA,MAAIM,MAAO,CAACF,SAAU,OAAQuB,WAAY,QAAQ5B,SAAC,gBAC3D6B,WAAY,EACR5B,EAAAA,EAAAA,KAAA,OAAAD,SAAK,sBACLC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,uBACLC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,oBAET8B,WAAY,SAACC,EAAMC,GAAK,OAAK/B,EAAAA,EAAAA,KAACsB,EAAAA,GAAAA,KAAS,CACnCV,QAAS,kBAxOjC,SAACoB,GAAS,IAADC,EACrBvK,EAAasK,GACb5K,EAAWT,EAAYqL,KACvBC,EAAAnM,EAAMoM,OAAMrF,IAAGsF,MAAAF,GAAAhF,EAAAA,EAAAA,GAAItG,EAAYqL,IACnC,CAoOuD1E,CAAQyE,EAAM,EAC7BzB,MAAOyB,GAAStK,EAAY,CAAC4I,OAAQ,oBAAqB+B,aAAc,OAAS,CAACC,OAAQ,WAAWtC,SAEpG+B,GACO,KAG5B,CACIV,OAAOvB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EACjBC,EAAAA,EAAAA,KAACsC,EAAAA,EAAqB,KACtBtC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBAEfoB,IAAK,IACLpB,UAAUC,EAAAA,EAAAA,KAACsB,EAAAA,GAAI,CACHC,UAAQ,EACRC,KAAK,QACLlB,MAAO,CAACnF,UAAW,OAAQsG,UAAW,cACtCC,QAAQ1B,EAAAA,EAAAA,KAAA,MAAIM,MAAO,CAACF,SAAU,OAAQuB,WAAY,QAAQ5B,SAAC,oBAC3D6B,WAAY,EACR5B,EAAAA,EAAAA,KAAA,OAAAD,SAAK,oBACLC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,yBAIT8B,WAAY,SAACC,EAAMC,GAAK,OAAK/B,EAAAA,EAAAA,KAACsB,EAAAA,GAAAA,KAAS,CACnCV,QAAS,kBA5P7B,SAACoB,GACjB,GAAY,IAARA,EAAW,CACX,IAAIO,EAAc,IAAIjM,EAAAA,IAAmB,EAAG,EAAG,GAC/CR,EAAMC,SAASyM,UACf1M,EAAMC,SAAWwM,CACrB,KAAO,CACH,IAAIE,EAAmB,IAAInM,EAAAA,IAAuB,GAAK,GAAK,EAAG,IAC/DR,EAAMC,SAASyM,UACf1M,EAAMC,SAAW0M,CACrB,CACJ,CAkPuDC,CAAYX,EAAM,EAAEzB,MAAOyB,GAASlK,EAAgB,CAACwI,OAAQ,oBAAqB+B,aAAc,OAAQ,CAACC,OAAQ,WAAWtC,SAE1I+B,GACO,KAG5B,CACIV,OAAOvB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EACjBC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAY,KACb3C,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cAEfoB,IAAK,IACLpB,UAAUF,EAAAA,EAAAA,MAAA,OAAKS,MAAO,CAACqB,WAAY,OAAQxG,UAAW,OAAQyH,QAAS,OAAQC,cAAe,UAAU9C,SAAA,EAC5FF,EAAAA,EAAAA,MAAA,OAAKS,MAAO,CAACsC,QAAS,OAAQE,eAAgB,gBAAiBC,aAAc,QAAQhD,SAAA,EACjFF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,OACIY,QAAS,kBAAM3I,IAAQ,EAAK,EAC5BqI,MAAO,CAAC7F,MAAO,QAASC,OAAQ,OAAQ0H,aAAc,MAAOY,gBAAiBjK,GAAWsJ,OAAO,iBAIxGxC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJC,EAAAA,EAAAA,KAAA,OACIY,QAAS,kBAAM3I,IAAQ,EAAK,EAC5BqI,MAAO,CAAC7F,MAAO,QAASC,OAAQ,OAAQ0H,aAAc,MAAOY,gBAAiBjK,GAAWsJ,OAAO,oBAK5GxC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJF,EAAAA,EAAAA,MAACoD,EAAAA,GAAAA,MAAW,CAACC,SApK5B,SAACnE,GACtBlJ,EAAU,GAAGqH,IAAM,IAAI5G,EAAAA,IAAoBqF,GAAeoD,EAAEZ,OAAO5H,QACnEV,EAAU,GAAGqH,IAAM,IAAI5G,EAAAA,IAAoBqF,GAAeoD,EAAEZ,OAAO5H,QACnE6C,GAAc2F,EAAEZ,OAAO5H,MAC3B,EAgKiFA,MAAO4C,GAAW4G,SAAA,EACvDC,EAAAA,EAAAA,KAACiD,EAAAA,GAAK,CAAC1M,MAAO,2EAAewJ,SAAC,WAC9BC,EAAAA,EAAAA,KAACiD,EAAAA,GAAK,CAAC1M,MAAO,2EAAewJ,SAAC,mBAKtD,CACIqB,OAAOvB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EACjBC,EAAAA,EAAAA,KAACmD,EAAAA,EAA4B,KAC7BnD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,mBAEfoB,IAAK,IACLpB,UAAUC,EAAAA,EAAAA,KAACrH,EAAAA,EAAI,CAACC,KAAMA,GAAMwK,OAAO,WAAUrD,SAErC,CAAC,SAAU,UAAW,QAAS,UAAW,UAAU7C,KAAI,SAAC4E,EAAMC,GAC3D,OAAO/B,EAAAA,EAAAA,KAACrH,EAAAA,EAAAA,KAAS,CAEL0K,KAAMvB,EACNV,OAAOvB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACKF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAO+B,EAAK,QACZ9B,EAAAA,EAAAA,KAACsD,EAAAA,EAAM,CAACC,QAAS/K,GAASuJ,GAAQmB,SAAU,SAACnE,GAAC,OA7P5F,SAACA,EAAGgD,GACd,IAAIyB,GAAGvG,EAAAA,EAAAA,GAAOzE,IACdgL,EAAIzB,GAAShD,EACbtG,GAAY+K,GACY,WAApBnN,EAAS0L,IAELvI,GADAuF,EACUnG,GAAK6K,gBAAgBC,QAAU,cAE/B,IAGM,YAApBrN,EAAS0L,IAELnI,GADAmF,EACWnG,GAAK6K,gBAAgBE,SAAW,4BAEhC,IAGK,UAApBtN,EAAS0L,IAEL/H,GADA+E,EACSnG,GAAK6K,gBAAgBG,OAAS,gBAE9B,IAGO,YAApBvN,EAAS0L,IAEL3H,GADA2E,EACWnG,GAAK6K,gBAAgBI,SAAW,sBAEhC,IAGK,WAApBxN,EAAS0L,KAELlM,EAAU,GADVkJ,EACe,IAAIzI,EAAAA,IAAyB,CACxC4G,IAAK/G,IAGM,IAAIG,EAAAA,IAAyB,CAAE6G,MAAOpE,KAGjE,CAoN+G+K,CAAM/E,EAAGgD,EAAM,OAE7EhC,UAEDC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAK,CACFC,UAAUxL,GAASuJ,GACnBkC,YAAa,QAAUnC,EACvBoB,SAAmB,WAATpB,EAAoB1E,GAAe,SAAC2B,GAAC,OA5R/E,SAACA,EAAG+C,GACpB,IAAIvL,EAAQwI,EAAEZ,OAAO5H,MACR,WAATuL,GACAtI,GAAUjD,GAED,YAATuL,GACAlI,GAAWrD,GAEF,UAATuL,GACA9H,GAASzD,GAEA,YAATuL,GACA1H,GAAW7D,EAUnB,CAsQwG2N,CAAYnF,EAAG+C,EAAK,KAXvEA,EAcrB,aAQxB9B,EAAAA,EAAAA,KAACmE,EAAAA,EAAM,CAACjE,MAAM,kBAAkBzF,MAAO,IAAK2J,QAAS,kBAAMnM,IAAQ,EAAM,EAAED,KAAMA,GAAMqM,UAAU,EAAMtE,SAE/F,CAAC,MAAO,SAAU,QAAQ7C,KAAI,SAAA4E,GAC1B,OAAOjC,EAAAA,EAAAA,MAACyE,EAAAA,SAAc,CAAAvE,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OAAAD,SAAM+B,KACN9B,EAAAA,EAAAA,KAAA,OAAKY,QAAS,kBAAM5H,GAAa8I,EAAK,EAAExB,MAAO,CAAC7F,MAAO,OAAQC,OAAQ,OAAQsI,gBAAiBlB,EAAMO,OAAQ,eAFtFP,EAIhC,OAIR9B,EAAAA,EAAAA,KAACuE,EAAAA,EAAK,CACFC,OAAQ,KACRxM,KAAMI,GACNqM,SA5TS,WACjBpM,IAAe,GACf,IAAMmG,EAAW5H,EAAY6H,QACzBrI,GAAUA,EAASwH,YAAYY,EACvC,EAyTYkG,YAAY,OACZjK,MAAO,IACPkK,UAAW,CACPjK,OAAQ,QACRkI,QAAS,OACTE,eAAgB,SAChB8B,WAAY,UACd7E,UAEFC,EAAAA,EAAAA,KAAA,OAAKe,IAAKjK,QAG1B,C","sources":["pages/Demo/webglShader2/index.js"],"sourcesContent":["\nimport React, { useRef ,useState, useEffect } from 'react'\n\nimport { Card, Button, Tabs, Modal, List, Switch, Input, Tooltip, Drawer, Form, Radio } from 'antd'\n\nimport {\n    SearchOutlined,\n    CodeSandboxOutlined,\n    InsertRowLeftOutlined,\n    BulbOutlined,\n    FundProjectionScreenOutlined,\n} from '@ant-design/icons'\n\nimport './container.less'\n\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js'\n\nimport QRcode from \"qrcode\"\n\nlet clock, camera, scene, renderer\nlet axesHelper, pointLight\nlet geometry1, material1, mesh1\nlet materialS, mesh2, geometry\nlet uniforms1, uniforms2\n\nlet image, temp\n\nlet tempNode\n\nlet itemList = ['Slogan', 'Website', 'Phone', 'Address', 'QRcode']\n\nclock = new THREE.Clock()\n\nuniforms1 = {\n    'time': { value: 1.0 }\n}\n\nuniforms2 = {\n    'time': { value: 1.0 },\n    'colorTexture': { value: new THREE.TextureLoader().load( 'textures/disturb.jpg' ) }\n}\n\nuniforms2[ 'colorTexture' ].value.wrapS = uniforms2[ 'colorTexture' ].value.wrapT = THREE.RepeatWrapping\n\nconst params = [\n    [ 'fragment_shader1', uniforms1 ],\n    [ 'fragment_shader2', uniforms2 ],\n    [ 'fragment_shader3', uniforms1 ],\n    [ 'fragment_shader4', uniforms1 ],\n]\n\nconst params2fragmentShader = {\n    'fragment_shader1': `\n        uniform float time;\n\n        varying vec2 vUv;\n\n        void main(void) {\n\n            vec2 p = - 1.0 + 2.0 * vUv;\n            float a = time * 40.0;\n            float d, e, f, g = 1.0 / 40.0 ,h ,i ,r ,q;\n\n            e = 400.0 * ( p.x * 0.5 + 0.5 );\n            f = 400.0 * ( p.y * 0.5 + 0.5 );\n            i = 200.0 + sin( e * g + a / 150.0 ) * 20.0;\n            d = 200.0 + cos( f * g / 2.0 ) * 18.0 + cos( e * g ) * 7.0;\n            r = sqrt( pow( abs( i - e ), 2.0 ) + pow( abs( d - f ), 2.0 ) );\n            q = f / r;\n            e = ( r * cos( q ) ) - a / 2.0;\n            f = ( r * sin( q ) ) - a / 2.0;\n            d = sin( e * g ) * 176.0 + sin( e * g ) * 164.0 + r;\n            h = ( ( f + d ) + a / 2.0 ) * g;\n            i = cos( h + r * p.x / 1.3 ) * ( e + e + a ) + cos( q * g * 6.0 ) * ( r + h / 3.0 );\n            h = sin( f * g ) * 144.0 - sin( e * g ) * 212.0 * p.x;\n            h = ( h + ( f - e ) * q + sin( r - ( a + h ) / 7.0 ) * 10.0 + i / 4.0 ) * g;\n            i += cos( h * 2.3 * sin( a / 350.0 - q ) ) * 184.0 * sin( q - ( r * 4.3 + a / 12.0 ) * g ) + tan( r * g + h ) * 184.0 * cos( r * g + h );\n            i = mod( i / 5.6, 256.0 ) / 64.0;\n            if ( i < 0.0 ) i += 4.0;\n            if ( i >= 2.0 ) i = 4.0 - i;\n            d = r / 350.0;\n            d += sin( d * d * 8.0 ) * 0.52;\n            f = ( sin( a * g ) + 1.0 ) / 2.0;\n            gl_FragColor = vec4( vec3( f * i / 1.6, i / 2.0 + d / 13.0, i ) * d * p.x + vec3( i / 1.3 + d / 8.0, i / 2.0 + d / 18.0, i ) * d * ( 1.0 - p.x ), 1.0 );\n\n        }\n    `,\n    'fragment_shader2': `\n        uniform float time;\n\n        uniform sampler2D colorTexture;\n\n        varying vec2 vUv;\n\n        void main( void ) {\n\n            vec2 position = - 1.0 + 2.0 * vUv;\n\n            float a = atan( position.y, position.x );\n            float r = sqrt( dot( position, position ) );\n\n            vec2 uv;\n            uv.x = cos( a ) / r;\n            uv.y = sin( a ) / r;\n            uv /= 10.0;\n            uv += time * 0.05;\n\n            vec3 color = texture2D( colorTexture, uv ).rgb;\n\n            gl_FragColor = vec4( color * r * 1.5, 1.0 );\n\n        }\n    `,\n    'fragment_shader3': `\n        uniform float time;\n\n        varying vec2 vUv;\n\n        void main( void ) {\n\n            vec2 position = vUv;\n\n            float color = 0.0;\n            color += sin( position.x * cos( time / 15.0 ) * 80.0 ) + cos( position.y * cos( time / 15.0 ) * 10.0 );\n            color += sin( position.y * sin( time / 10.0 ) * 40.0 ) + cos( position.x * sin( time / 25.0 ) * 40.0 );\n            color += sin( position.x * sin( time / 5.0 ) * 10.0 ) + sin( position.y * sin( time / 35.0 ) * 80.0 );\n            color *= sin( time / 10.0 ) * 0.5;\n\n            gl_FragColor = vec4( vec3( color, color * 0.5, sin( color + time / 3.0 ) * 1 ), 1.0 );\n\n        }\n    `,\n    'fragment_shader4': `\n        uniform float time;\n\n        varying vec2 vUv;\n\n        void main( void ) {\n\n            vec2 position = - 1.0 + 2.0 * vUv;\n\n            float red = abs( sin( position.x * position.y + time / 5.0 ) );\n            float green = abs( sin( position.x * position.y + time / 4.0 ) );\n            float blue = abs( sin( position.x * position.y + time / 3.0 ) );\n            gl_FragColor = vec4( red, green, blue, 1.0 );\n\n        }\n    `,\n}\n\nconst num2boxSize = {\n    '0': [1, 1, 1],\n    '1': [2, 2, 2],\n    '2': [4, 4, 4],\n}\n\n\nconst WebglShader2 = () => {\n    \n    // 画布挂载\n    const threeBoxRef = useRef(null)\n    const threeBoxPlusRef = useRef(null)\n\n    // 三维设置\n    const [boxSize, setBoxSize] = useState([1, 1, 1])\n    const [boxMaterial, setBoxMaterial] = useState(0)\n    \n    const [sizeIndex, setSizeIndex] = useState(0)\n    const [materialIndex, setMaterialIndex] = useState(0)\n\n    // 组件开关\n    const [open, setOpen] = useState(false)\n    const [isModalOpen, setIsModalOpen] = useState(false)\n\n    //组件选项\n    const [arrValue, setArrValue] = useState([true, true, true, true, true])\n    const [form] = Form.useForm()\n    const [mainColor, setMainColor] = useState('red')\n    const [radioValue, setRadioValue] = useState('🍊🧃🍊🧃🍊🧃')\n\n    const [slogan, setSlogan] = useState('Eat~please~')\n    const [website, setWebsite] = useState('https://maxus-v.github.io')\n    const [phone, setPhone] = useState('020-8310-4400')\n    const [address, setAddress] = useState('Hongkong-Hollywood')\n\n    const getTextCanvas = (text1, text2, text3) => {\n        var width = 512, height = 256;\n        var canvas = document.createElement('canvas')\n        canvas.width = width\n        canvas.height = height\n        var ctx = canvas.getContext('2d')\n        // ctx.fillStyle = '#C3C3C3'\n        ctx.fillStyle = mainColor\n        ctx.fillRect(0, 0, width, height)\n        ctx.font = 30 + 'px \" bold'\n        ctx.fillStyle = 'white'\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(text1, width/2, height/1.7)\n        ctx.fillText(text2, width/2, height/1.4)\n        ctx.fillText(text3, width/2, height/1.2)\n        return canvas\n    }\n\n    const getTextCanvas1 = (value) => {\n        var width=256, height=256; \n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = mainColor\n        ctx.fillRect(0, 0, width, height);\n        ctx.drawImage(value, width/4, height/4, width/2, height/2);\n        ctx.strokeStyle = \"white\";\n        ctx.lineWidth = 4;\n        ctx.strokeRect(width/4, height/4, width/2, height/2);\n        \n        return canvas;\n    }\n\n    const getTextCanvas2 = (text) => {\n        var width = 512, height = 256;\n        var canvas = document.createElement('canvas')\n        canvas.width = width\n        canvas.height = height\n        var ctx = canvas.getContext('2d')\n        ctx.fillStyle = mainColor\n        ctx.fillRect(0, 0, width, height)\n        ctx.font = 50 + 'px \" bold'\n        ctx.fillStyle = 'white'\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(text, width/2, height/2)\n        return canvas\n    }\n\n    const createMaterialS = () => {\n        geometry = new THREE.BoxGeometry( ...boxSize )\n        materialS = [\n            new THREE.MeshBasicMaterial( { \n                map: new THREE.CanvasTexture(getTextCanvas2(radioValue)),\n             } ), //逆时针1\n            new THREE.MeshBasicMaterial( {\n                map: new THREE.CanvasTexture(getTextCanvas2(radioValue)),\n            } ),// 逆时针3\n            new THREE.MeshPhongMaterial({\n                color: mainColor\n            }),// 上方\n            new THREE.MeshBasicMaterial( { color: mainColor } ), // 下方\n            new THREE.MeshBasicMaterial( { \n                map: new THREE.CanvasTexture(getTextCanvas2(slogan)),\n             } ),  //逆时针2\n            new THREE.MeshBasicMaterial( { \n                map: new THREE.CanvasTexture(getTextCanvas(website, phone, address))\n             } ), //逆时针4\n        ] \n        changeInput2()\n        \n        mesh2 = new THREE.Mesh( geometry, materialS )\n        mesh2.position.x = 0\n        mesh2.position.y = 0\n        mesh2.position.z = 0\n        mesh2.castShadow = true\n        scene.add( mesh2 )\n    }\n\n    const init = (refCurrent) => {\n        let offsetWidth = refCurrent.parentNode.parentNode.offsetWidth\n        let offsetHeight = refCurrent.parentNode.parentNode.offsetHeight\n        camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 3000 )\n        camera.lookAt(0, 0, 0)\n        camera.position.x = 4\n        camera.position.y = 4\n\t    camera.position.z = 4\n        camera.aspect = offsetWidth / offsetHeight\n        camera.updateProjectionMatrix()\n\n        scene = new THREE.Scene()\n        scene.background = new THREE.Color( 0xffffff )\n\n        // axesHelper = new THREE.AxesHelper(150)\n        // scene.add(axesHelper)\n\n        pointLight = new THREE.SpotLight(0xffffff, 2.0)\n        pointLight.position.set(2, 2, 2)\n        pointLight.castShadow = true\n        scene.add(pointLight)\n\n        // geometry1 = new THREE.BoxGeometry( ...boxSize )\n        // material1 = new THREE.ShaderMaterial( {\n        //     uniforms: params[ boxMaterial ][ 1 ],\n        //     vertexShader: `\n        //         varying vec2 vUv;\n        //         void main()\n        //         {\n        //             vUv = uv;\n        //             vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n        //             gl_Position = projectionMatrix * mvPosition;\n        //         }\n        //     `,\n        //     fragmentShader: params2fragmentShader[ params[ boxMaterial ][ 0 ] ]\n        // } )\n        // mesh1 = new THREE.Mesh( geometry1, material1 )\n        // mesh1.position.x = 0\n        // mesh1.position.y = 0\n        // mesh1.position.z = 0\n        // scene.add( mesh1)\n\n        createMaterialS()\n\n        renderer = new THREE.WebGLRenderer({\n            antialias: true,\n        })\n        renderer.setSize( offsetWidth, offsetHeight )\n        renderer.setPixelRatio( window.devicePixelRatio )\n        renderer.shadowMap.enabled = true\n        if (refCurrent) {\n            refCurrent.innerHTML = \"\"\n            refCurrent.appendChild( renderer.domElement )\n        }\n        refCurrent.appendChild( renderer.domElement )\n\n        const controls = new OrbitControls( camera, renderer.domElement )\n        controls.enableZoom = true\n        controls.minDistance = 3\n        controls.maxDistance = 10\n        controls.target.set( 0, 0, 0 )\n        controls.update()\n\n        window.addEventListener( 'resize', onWindowResize )\n        animate()\n    }\n\n    const onWindowResize = () => {\n        const threeBox = threeBoxRef.current\n        let offsetWidth = threeBox.parentNode.parentNode.offsetWidth\n        let offsetHeight = threeBox.parentNode.parentNode.offsetHeight\n        camera.aspect = offsetWidth / offsetHeight\n        camera.updateProjectionMatrix()\n        renderer.setSize( offsetWidth, offsetHeight )\n\n    }\n\n    const animate = () => {\n        requestAnimationFrame( animate )\n        render()\n    }\n\n    const render = () => {\n        const delta = clock.getDelta()\n        uniforms1[ 'time' ].value += delta * 5\n        uniforms2[ 'time' ].value = clock.elapsedTime\n        // for ( let i = 0; i < scene.children.length; i ++ ) {\n        //     const object = scene.children[ i ]\n        //     object.rotation.y += delta * 0.5 * ( i % 2 ? 1 : - 1 )\n        //     object.rotation.x += delta * 0.5 * ( i % 2 ? - 1 : 1 )\n        // }\n        renderer.render( scene, camera )\n    }\n\n    // 三维设置\n    const setSize = (num) => {\n        setSizeIndex(num)\n        setBoxSize(num2boxSize[num])\n        mesh2.scale.set(...num2boxSize[num])\n    }\n    const setMaterial = (num) => {\n        if (num === 0) {\n            let boxGeometry = new THREE.BoxGeometry( 1, 1, 1 )\n            mesh2.geometry.dispose()\n            mesh2.geometry = boxGeometry\n        } else {\n            let cylinderGeometry = new THREE.CylinderGeometry(0.5, 0.5, 1, 32)\n            mesh2.geometry.dispose()\n            mesh2.geometry = cylinderGeometry\n        }\n    }\n\n    //组件开关\n    const showModal = () => {\n        setIsModalOpen(true)\n        const threeBoxPlus = threeBoxPlusRef.current\n        const threeBox = threeBoxRef.current\n        console.log('threeBoxPlus', threeBoxPlus, threeBox.parentNode)\n        tempNode = threeBox.parentNode\n        threeBoxPlus.appendChild(threeBox)\n        // init(threeBoxPlus)\n    }\n    const handleCancel = () => {\n        setIsModalOpen(false)\n        const threeBox = threeBoxRef.current\n        if (tempNode) tempNode.appendChild(threeBox)\n    }\n\n    //组件选项\n    const changeInput = (e, item) => {\n        let value = e.target.value\n        if (item === 'Slogan') {\n            setSlogan(value)\n        }\n        if (item === 'Website') {\n            setWebsite(value)\n        }\n        if (item === 'Phone') {\n            setPhone(value)\n        }\n        if (item === 'Address') {\n            setAddress(value)\n        }\n        // let textMesh = createText('233')\n        // scene.add(textMesh)\n        // setInputValue(e.target.value)\n        // materialS.map = new THREE.CanvasTexture(getTextCanvas(inputValue))\n        // createMaterialS(e.target.value)\n        // const threeBox = threeBoxRef.current\n        // threeBox.innerHTML = ''\n        // init(threeBox)\n    }\n\n    const test2 = (e, index) => {\n        let arr = [...arrValue]\n        arr[index] = e\n        setArrValue(arr)\n        if (itemList[index] === 'Slogan') {\n            if (e) {\n                setSlogan(form.getFieldValue().Slogan || 'Eat~please~')\n            } else {\n                setSlogan('')\n            }\n        }\n        if (itemList[index] === 'Website') {\n            if (e) {\n                setWebsite(form.getFieldValue().Website || 'https://maxus-v.github.io')\n            } else {\n                setWebsite('')\n            }\n        }\n        if (itemList[index] === 'Phone') {\n            if (e) {\n                setPhone(form.getFieldValue().Phone || '020-8310-4400')\n            } else {\n                setPhone('')\n            }\n        }\n        if (itemList[index] === 'Address') {\n            if (e) {\n                setAddress(form.getFieldValue().Address || 'Hongkong-Holloywood')\n            } else {\n                setAddress('')\n            }\n        }\n        if (itemList[index] === 'QRcode') {\n            if (e) {\n                materialS[2] = new THREE.MeshBasicMaterial( { \n                    map: temp\n                 } )\n            } else {\n                materialS[2] = new THREE.MeshBasicMaterial( { color: mainColor } )\n            }\n        }\n    }\n\n    const changeInput2 = (e) => {\n\n        QRcode.toDataURL(e && e.target && e.target.value || 'https://maxus-v.github.io', {\n            type: \"image/png\", //类型\n            quality: 0.5, //图片质量A Number between 0 and 1\n            width: 130, //高度\n            height: 130, //宽度\n            errorCorrectionLevel: \"L\", //容错率\n            margin: 2, //外边距\n            color: {\n                dark: \"#ffffff\", //前景色\n                light: mainColor //背景色\n            },\n        })\n        .then(imgData => {\n            image = new Image();\n            image.src = imgData\n            image.onload = () => {\n                temp = new THREE.CanvasTexture(getTextCanvas1(image))\n                materialS[2].map = temp\n            }\n            \n        })\n    }\n\n    const changeRadioValue = (e) => {\n        materialS[0].map = new THREE.CanvasTexture(getTextCanvas2(e.target.value))\n        materialS[1].map = new THREE.CanvasTexture(getTextCanvas2(e.target.value))\n        setRadioValue(e.target.value)\n    }\n\n    useEffect(() => {   \n        const threeBox = threeBoxRef.current\n        init(threeBox)\n        return () => {\n            threeBox.innerHTML = \"\"\n        }\n    }, [])\n\n    useEffect(() => {\n        materialS[0] = new THREE.MeshBasicMaterial( { \n            map: new THREE.CanvasTexture(getTextCanvas2(radioValue)),\n         } )\n        materialS[1] = new THREE.MeshBasicMaterial( { \n            map: new THREE.CanvasTexture(getTextCanvas2(radioValue)),\n         } )\n        materialS[3] = new THREE.MeshBasicMaterial( { color: mainColor } )\n        materialS[4] = new THREE.MeshBasicMaterial( { \n            map: new THREE.CanvasTexture(getTextCanvas2(slogan))\n        } )\n        materialS[5] = new THREE.MeshBasicMaterial( { \n            map: new THREE.CanvasTexture(getTextCanvas(website, phone, address))\n         } )\n\n\n         QRcode.toDataURL('https://maxus-v.github.io', {\n            type: \"image/png\", //类型\n            quality: 0.5, //图片质量A Number between 0 and 1\n            width: 130, //高度\n            height: 130, //宽度\n            errorCorrectionLevel: \"L\", //容错率\n            margin: 2, //外边距\n            color: {\n                dark: \"#ffffff\", //前景色\n                light: mainColor //背景色\n            },\n        })\n        .then(imgData => {\n            image = new Image();\n            image.src = imgData\n            image.onload = () => {\n                materialS[2] = new THREE.MeshBasicMaterial( { \n                    map: new THREE.CanvasTexture(getTextCanvas1(image))\n                 } )\n            }\n            \n        })\n\n    }, [mainColor, website, phone, address, slogan])\n\n    return <div className='displayingArea'>\n            <div className='leftArea'>\n                <Card\n                    title=\"Displaying Effect\"\n                    headStyle={{\n                        fontSize: '22px',\n                        textAlign: 'left',\n                        color: '#1677ff',\n                        border: 'none'\n                    }}\n                    style={{\n                        width: 300,\n                        height: 300,\n                        border: 'none'\n                    }}\n                    extra={\n                        <Tooltip title=\"Change the viewer\" color={'#1677ff'}>\n                            <Button icon={<SearchOutlined />} onClick={showModal} />\n                        </Tooltip>\n                    }\n                    actions={[\n                        <p style={{color: '#1677ff', fontSize: '18px'}}>\n                            webglShader2\n                        </p>\n                    ]}\n                >\n                    <div ref={threeBoxRef}></div>\n                </Card>\n            </div>\n            \n            <div className='rightArea'>\n                <Tabs\n                    defaultActiveKey=\"1\"\n                    items={[\n                        {\n                            key: '1',\n                            label: <div className='icon1'>\n                                        <CodeSandboxOutlined />\n                                        <p>Standards</p>\n                                    </div>,\n                            children: <List\n                                        bordered\n                                        size=\"large\"\n                                        style={{textAlign: 'left', boxSizing: 'border-box'}}\n                                        header={<h1 style={{fontSize: '16px', fontWeight: 'bold'}}>Choose Size</h1>}\n                                        dataSource={[\n                                            <div>#1 SMALL (1*1*1)</div>,\n                                            <div>#2 MIDDLE (2*2*2)</div>,\n                                            <div>#3 BIG (4*4*4)</div>\n                                        ]}\n                                        renderItem={(item, index) => <List.Item \n                                            onClick={() => setSize(index)} \n                                            style={index == sizeIndex ? {border: '2px solid #1677ff', borderRadius: '4px'} : {cursor: 'pointer'}}\n                                        >\n                                            {item}\n                                        </List.Item>}\n                                    />,\n                        },\n                        {\n                            label: <div className='icon2'>\n                                        <InsertRowLeftOutlined />\n                                        <p>Templates</p>\n                                    </div>,\n                            key: '2',\n                            children: <List\n                                        bordered\n                                        size=\"large\"\n                                        style={{textAlign: 'left', boxSizing: 'border-box'}}\n                                        header={<h1 style={{fontSize: '16px', fontWeight: 'bold'}}>Choose Material</h1>}\n                                        dataSource={[\n                                            <div>#1 BoxGeometry</div>,\n                                            <div>#2 CylinderGeometry</div>,\n                                            // <div>#3 Material3</div>,\n                                            // <div>#4 Material4</div>\n                                        ]}\n                                        renderItem={(item, index) => <List.Item \n                                            onClick={() => setMaterial(index)} style={index == materialIndex ? {border: '2px solid #1677ff', borderRadius: '4px'}: {cursor: 'pointer'}}\n                                        >\n                                            {item}\n                                        </List.Item>}\n                                    />,\n                        },\n                        {\n                            label: <div className='icon3'>\n                                        <BulbOutlined />\n                                        <p>Design</p>\n                                    </div>,\n                            key: '3',\n                            children: <div style={{fontWeight: 'bold', textAlign: 'left', display: 'flex', flexDirection: 'column'}}>\n                                        <div style={{display: 'flex', justifyContent: 'space-between', marginBottom: '10px'}}>\n                                            <div>\n                                                <h1>Main color</h1>\n                                                <div \n                                                    onClick={() => setOpen(true)} \n                                                    style={{width: '200px', height: '30px', borderRadius: '4px', backgroundColor: mainColor, cursor:'pointer'}}\n                                                >\n                                                </div>\n                                            </div>\n                                            <div>\n                                                <h1>Secondary Color</h1>\n                                                <div \n                                                    onClick={() => setOpen(true)} \n                                                    style={{width: '200px', height: '30px', borderRadius: '4px', backgroundColor: mainColor, cursor:'pointer'}}\n                                                >\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div>\n                                            <h1>Select test logo</h1>\n                                            <Radio.Group onChange={changeRadioValue} value={radioValue}>\n                                                <Radio value={'🍊🧃🍊🧃🍊🧃'}>Juice</Radio>\n                                                <Radio value={'🐂🥛🐂🥛🐂🥛'}>Milk</Radio>\n                                            </Radio.Group>\n                                        </div>\n                                    </div>,\n                        },\n                        {\n                            label: <div className='icon4'>\n                                        <FundProjectionScreenOutlined />\n                                        <p>Information</p>\n                                    </div>,\n                            key: '4',\n                            children: <Form form={form} layout=\"vertical\">\n                                {\n                                    ['Slogan', 'Website', 'Phone', 'Address', 'QRcode'].map((item, index) => {\n                                        return <Form.Item \n                                                    key={item} \n                                                    name={item} \n                                                    label={<div>\n                                                                <span>{item} </span>\n                                                                <Switch checked={arrValue[index]} onChange={(e) => test2(e, index)} />\n                                                            </div>\n                                                    }\n                                                >\n                                                    <Input \n                                                        disabled={arrValue[index]? false : true} \n                                                        placeholder={'Your ' + item}\n                                                        onChange={item === 'QRcode' ? changeInput2 : (e) => changeInput(e, item)}\n                                                    />\n                                                </Form.Item>\n                                    })\n                                }\n                            </Form>\n                        },\n                    ]}\n                />\n            </div>\n\n            <Drawer title=\"Recommend Color\" width={500} onClose={() => setOpen(false)} open={open} closable={false}>\n                {\n                    ['red', 'yellow', 'blue'].map(item => {\n                        return <React.Fragment key={item}>\n                            <div>{item}</div>\n                            <div onClick={() => setMainColor(item)} style={{width: '50px', height: '50px', backgroundColor: item, cursor: 'pointer'}}></div>\n                        </React.Fragment>\n                    })\n                }\n            </Drawer>\n\n            <Modal\n                footer={null}\n                open={isModalOpen}\n                onCancel={handleCancel} \n                forceRender=\"true\"\n                width={1000}\n                bodyStyle={{\n                    height: '600px',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                }}\n            >\n                <div ref={threeBoxPlusRef}></div>\n            </Modal>\n        </div>\n}\n\nexport default WebglShader2"],"names":["clock","camera","scene","renderer","pointLight","materialS","mesh2","geometry","uniforms1","uniforms2","image","temp","tempNode","itemList","THREE","value","load","wrapS","wrapT","num2boxSize","threeBoxRef","useRef","threeBoxPlusRef","_useState","useState","_useState2","_slicedToArray","boxSize","setBoxSize","_useState3","_useState4","_useState5","_useState6","sizeIndex","setSizeIndex","_useState7","_useState8","materialIndex","_useState9","_useState10","open","setOpen","_useState11","_useState12","isModalOpen","setIsModalOpen","_useState13","_useState14","arrValue","setArrValue","_Form$useForm","Form","form","_useState15","_useState16","mainColor","setMainColor","_useState17","_useState18","radioValue","setRadioValue","_useState19","_useState20","slogan","setSlogan","_useState21","_useState22","website","setWebsite","_useState23","_useState24","phone","setPhone","_useState25","_useState26","address","setAddress","getTextCanvas","text1","text2","text3","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","getTextCanvas1","drawImage","strokeStyle","lineWidth","strokeRect","getTextCanvas2","text","init","refCurrent","offsetWidth","parentNode","offsetHeight","window","innerWidth","innerHeight","lookAt","position","x","y","z","aspect","updateProjectionMatrix","background","set","castShadow","add","_construct","_toConsumableArray","map","color","changeInput2","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","innerHTML","appendChild","domElement","controls","OrbitControls","enableZoom","minDistance","maxDistance","target","update","addEventListener","onWindowResize","animate","threeBox","current","requestAnimationFrame","render","delta","getDelta","elapsedTime","e","QRcode","type","quality","errorCorrectionLevel","margin","dark","light","then","imgData","Image","src","onload","useEffect","_jsxs","className","children","_jsx","Card","title","headStyle","fontSize","border","style","extra","Tooltip","Button","icon","SearchOutlined","onClick","threeBoxPlus","actions","ref","Tabs","defaultActiveKey","items","key","label","CodeSandboxOutlined","List","bordered","size","boxSizing","header","fontWeight","dataSource","renderItem","item","index","num","_mesh2$scale","scale","apply","borderRadius","cursor","InsertRowLeftOutlined","boxGeometry","dispose","cylinderGeometry","setMaterial","BulbOutlined","display","flexDirection","justifyContent","marginBottom","backgroundColor","Radio","onChange","FundProjectionScreenOutlined","layout","name","Switch","checked","arr","getFieldValue","Slogan","Website","Phone","Address","test2","Input","disabled","placeholder","changeInput","Drawer","onClose","closable","React","Modal","footer","onCancel","forceRender","bodyStyle","alignItems"],"sourceRoot":""}