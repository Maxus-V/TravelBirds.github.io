{"version":3,"file":"static/js/536.0367bd99.chunk.js","mappings":"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","sources":["pages/Demo/utils/index.js","pages/Demo/components/NarutoKick/index.js"],"sourcesContent":["\n\nimport {\n    Scene, Fog, PerspectiveCamera, Vector3, HemisphereLight, DirectionalLight, AmbientLight, \n    GridHelper, TextureLoader, SphereGeometry, MeshPhysicalMaterial, Mesh, AnimationMixer, \n    WebGLRenderer, sRGBEncoding, Clock, Raycaster, Vector2, MeshStandardMaterial\n} from 'three'\n\nimport { FBXLoader } from 'three/addons/loaders/FBXLoader.js'\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js'\n\nimport * as SkeletonUtils from 'three/addons/utils/SkeletonUtils.js'\n\nlet scene\nconst initScene = () => {\n    scene = new Scene()\n    scene.transparent = true\n    scene.opacity = 0.1\n    scene.fog = new Fog(0xa0a0a0, 200, 1000)\n}\n\nlet camera\nconst initCamera = () => {\n    camera = new PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000)\n    camera.position.set(0, 4, 16)\n    camera.lookAt(new Vector3(0, 0, 0))\n}\n\nlet light\nconst initLight = () => {\n    light = new HemisphereLight(0xefefef)\n    light.position.set(0, 20, 0)\n    scene.add(light)\n\n    light = new DirectionalLight(0x2d2d2d)\n    light.position.set(0, 20, 10)\n    light.castShadow = true\n    scene.add(light)\n\n    let ambientLight = new AmbientLight(0xffffff, .5)\n    scene.add(ambientLight)\n}\n\nlet grid\nconst initGrid = () => {\n    grid = new GridHelper(100, 100, 0xffffff, 0xffffff)\n    grid.position.set(0, -10, 0)\n    grid.material.opacity = 0.3\n    grid.material.transparent = true\n    scene.add(grid)\n}\n\nlet renderer\nconst initRenderer = (threeBox) => {\n    renderer = new WebGLRenderer({ antialias: true, alpha: true })\n    renderer.setPixelRatio(window.devicePixelRatio)\n    renderer.outputEncoding = sRGBEncoding\n    renderer.setSize(window.innerWidth, window.innerHeight)\n    renderer.setClearAlpha(0)\n    renderer.shadowMap.enabled = true\n    threeBox.appendChild(renderer.domElement)\n}\n\nlet controls\nconst initControls = () => {\n    controls = new OrbitControls(camera, renderer.domElement)\n    controls.target.set(0, 0, 0)\n    controls.update()\n    controls.minDistance = 3\n    controls.maxDistance = 50\n}\n\nconst onWindowResize = () => {\n    camera.aspect = window.innerWidth / window.innerHeight\n    camera.updateProjectionMatrix()\n    renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\nconst initListener = () => {\n    window.addEventListener('resize', onWindowResize, false)\n}\n\nexport {\n    scene,\n    initScene,\n    camera,\n    initCamera,\n    light,\n    initLight,\n    grid,\n    initGrid,\n    renderer,\n    initRenderer,\n    controls,\n    initControls,\n    initListener,\n}","import { useRef, useEffect, useState } from \"react\"\n\nimport { Button } from \"antd\"\n\nimport {\n    TextureLoader, SphereGeometry, MeshPhysicalMaterial, Mesh, AnimationMixer, \n    Clock, Raycaster, Vector2, MeshStandardMaterial\n} from 'three'\n\nimport { FBXLoader } from 'three/addons/loaders/FBXLoader.js'\nimport * as SkeletonUtils from 'three/addons/utils/SkeletonUtils.js'\n\nimport {\n    scene, initScene, camera, initCamera, initLight, initGrid, renderer, initRenderer,\n    initControls,initListener,\n} from '../../utils/index'\n\nimport './index.less'\n\nlet threeBox, progress, loading\nlet meshObject, clickableObjects = []\n\nlet loader = new FBXLoader()\nlet naruto1, naruto2, naruto3, naruto4, narutos = [], actions=[]\nconst initModel = () => {\n    let geometry = new SphereGeometry(3, 3, 3)\n    let material = new MeshPhysicalMaterial({\n        map: new TextureLoader().load(\"./metaLogo/metal.png\"),\n        metalness: .2,\n        roughness: 0.1,\n    })\n    meshObject = new Mesh(geometry, material)\n    meshObject.position.y = 8\n    scene.add(meshObject)\n    clickableObjects.push(meshObject)\n\n    loader.load('models/Naruto.fbx', (mesh) => {\n        mesh.traverse((child) => {\n            if (child.isMesh) {\n                child.castShadow = true\n                child.receiveShadow = true\n            }\n        })\n        const initNaruto = (name, nameArr=[], angle, position=[], index) => {\n            let model = SkeletonUtils.clone(mesh)\n            model.rotation.y = angle\n            model.position.set(...position)\n            model.scale.set(0.085, 0.085, 0.085)\n            scene.add(model)\n            name = new AnimationMixer(model)\n            nameArr.push(name)\n            mesh.animations.map(item => model.animations.push(item))\n            let animationClip = model.animations[index]\n            let action = name.clipAction(animationClip)\n            actions.push(action)\n            let clipAction = action.play()\n            animationClip = clipAction.getClip()\n        }\n        initNaruto(naruto1, narutos, Math.PI / 2, [-8, 0, -2], 0)\n        initNaruto(naruto2, narutos, -Math.PI / 2, [8, 0, -4], 8)\n        initNaruto(naruto3, narutos, -Math.PI / 2, [0, 0, -10], 9)\n        initNaruto(naruto4, narutos, Math.PI / 8, [0, 0, -2], 7)\n      }, res => {\n        let progressValue = (res.loaded / res.total * 100).toFixed(0)\n        if (!progressValue) {\n            loading.style.display = 'none'\n            return\n        }\n        progress.innerText = progressValue + '%'\n        if (Number(progressValue) === 100) {\n            setTimeout(() => {\n                loading.style.display = 'none'\n            }, 1000)\n        }\n      })\n}\n\nlet clock = new Clock()\nconst animate = () => {\n    let time = clock.getDelta()\n    renderer.render(scene, camera)\n    meshObject.rotation.y += Math.PI/4 * time\n    narutos.map(naruto => { naruto && naruto.update(time)})\n    requestAnimationFrame(animate)\n}\n\nlet raycaster = new Raycaster()\nlet mouse = new Vector2()\nconst onMouseClick = (event) => {\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1\n    raycaster.setFromCamera(mouse, camera)\n    let intersects = raycaster.intersectObjects(clickableObjects)\n    if (intersects.length > 0) {\n        let selectedObj = intersects[0].object\n        selectedObj.material = new MeshStandardMaterial({\n          color: `#${Math.random().toString(16).slice(-6)}`,\n          metalness: Math.random(),\n          roughness: Math.random()\n        })\n    }\n}\n\nconst draw = (threeBox) => {\n    initScene()\n    initCamera()\n    initLight()\n    initGrid()\n    initModel()\n    initRenderer(threeBox)\n    initControls()\n    animate()\n    initListener()\n    window.addEventListener('click', onMouseClick, false)\n}\n\nconst NarutoKick = () => {\n    const threeBoxRef = useRef(null)\n    const progressRef = useRef(null)\n    const loadingRef = useRef(null)\n    const [play, setPlay] = useState(true)\n    const changeAction = () => {\n        if (play) {\n            actions.map(item => item.stop())\n        } else {\n            actions.map(item => item.play())\n        }\n        setPlay(!play)\n    }\n    useEffect(() => {\n        threeBox = threeBoxRef.current\n        progress = progressRef.current\n        loading = loadingRef.current\n        draw(threeBox)\n        return () => {\n            threeBox.innerHTML = \"\"\n        }\n    }, [])\n    return <div className=\"NarutoKick\">\n                <i className=\"logo\"></i>\n                <div ref={loadingRef} className=\"loading\">\n                    <div className=\"content\">\n                        <i className=\"banner\"></i>\n                        <p className=\"text\">加载进度<span ref={progressRef}>0%</span></p>\n                    </div>\n                </div>\n                <div className=\"controler\">\n                    <Button type=\"danger\" size=\"large\" onClick={() => changeAction()}>\n                        {play? '暂停动画' : '播放动画'}\n                    </Button>\n                </div>\n                <div className=\"container\">\n                    <div ref={threeBoxRef}></div>\n                </div>\n            </div>\n    \n}\n\nexport default NarutoKick"],"names":["scene","camera","light","grid","renderer","controls","threeBox","progress","loading","meshObject","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","clickableObjects","loader","FBXLoader","narutos","actions","clock","Clock","animate","time","getDelta","render","rotation","y","Math","PI","map","naruto","update","requestAnimationFrame","raycaster","Raycaster","mouse","Vector2","onMouseClick","event","x","clientX","clientY","setFromCamera","intersects","intersectObjects","length","object","material","MeshStandardMaterial","color","concat","random","toString","slice","metalness","roughness","draw","Scene","transparent","opacity","fog","Fog","PerspectiveCamera","position","set","lookAt","Vector3","HemisphereLight","add","DirectionalLight","castShadow","ambientLight","AmbientLight","initLight","GridHelper","geometry","SphereGeometry","MeshPhysicalMaterial","TextureLoader","load","Mesh","push","mesh","traverse","child","isMesh","receiveShadow","initNaruto","name","_model$position","nameArr","arguments","undefined","angle","index","model","SkeletonUtils","apply","_toConsumableArray","scale","AnimationMixer","animations","item","animationClip","action","clipAction","play","getClip","naruto1","naruto2","naruto3","naruto4","res","progressValue","loaded","total","toFixed","innerText","Number","setTimeout","style","display","initModel","WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","outputEncoding","sRGBEncoding","setClearAlpha","shadowMap","enabled","appendChild","domElement","initRenderer","OrbitControls","target","minDistance","maxDistance","addEventListener","threeBoxRef","useRef","progressRef","loadingRef","_useState","useState","_useState2","_slicedToArray","setPlay","useEffect","current","innerHTML","_jsxs","className","children","_jsx","ref","Button","type","size","onClick","stop"],"sourceRoot":""}