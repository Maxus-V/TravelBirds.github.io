{"version":3,"file":"static/js/111.f0372b3d.chunk.js","mappings":"sMAkBMA,EAAS,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAEd,SAAAA,EAAaK,GAAU,OAAAC,EAAAA,EAAAA,GAAA,KAAAN,GAAAG,EAAAI,KAAA,KAEfF,EAER,CA8HC,OA5HDG,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,OAAAC,MAaA,SAAMC,EAAKC,EAAQC,EAAYC,GAE9B,IAAMC,EAAQC,KAERC,EAAuB,KAAdD,KAAKC,KAAgBC,EAAAA,IAAAA,eAA4BP,GAAQK,KAAKC,KAEvEE,EAAS,IAAIC,EAAAA,IAAYJ,KAAKX,SACpCc,EAAOE,QAASL,KAAKC,MACrBE,EAAOG,iBAAkBN,KAAKO,eAC9BJ,EAAOK,mBAAoBR,KAAKS,iBAChCN,EAAOO,KAAMf,GAAK,SAAWgB,GAE5B,IAECf,EAAQG,EAAMa,MAAOD,EAAMV,GAE5B,CAAE,MAAQY,GAEJf,EAEJA,EAASe,GAITC,QAAQC,MAAOF,GAIhBd,EAAMV,QAAQ2B,UAAWrB,EAE1B,CAED,GAAGE,EAAYC,EAEhB,GAAC,CAAAL,IAAA,qBAAAC,MAED,SAAoBA,GAGnB,OADAM,KAAKiB,gBAAkBvB,EAChBM,IAER,GAEA,CAAAP,IAAA,QAAAC,MAWA,SAAOiB,EAAMV,GAOZ,IALA,IAAMiB,EAAQP,EAAKQ,MAAO,MACtBC,EAAO,CAAC,EACNC,EAAoB,MACpBC,EAAgB,CAAC,EAEbC,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAAO,CAEzC,IAAIE,EAAOP,EAAOK,GAGlB,GAAqB,KAFrBE,EAAOA,EAAKC,QAEFF,QAAqC,MAArBC,EAAKE,OAAQ,GAAvC,CAOA,IAAMC,EAAMH,EAAKI,QAAS,KAEtBpC,EAAQmC,GAAO,EAAMH,EAAKK,UAAW,EAAGF,GAAQH,EACpDhC,EAAMA,EAAIsC,cAEV,IAAIrC,EAAUkC,GAAO,EAAMH,EAAKK,UAAWF,EAAM,GAAM,GAGvD,GAFAlC,EAAQA,EAAMgC,OAED,WAARjC,EAIJ2B,EAAO,CAAEY,KAAMtC,GACf4B,EAAe5B,GAAU0B,OAIzB,GAAa,OAAR3B,GAAwB,OAARA,GAAwB,OAARA,GAAwB,OAARA,EAAe,CAEnE,IAAMwC,EAAKvC,EAAMyB,MAAOE,EAAmB,GAC3CD,EAAM3B,GAAQ,CAAEyC,WAAYD,EAAI,IAAOC,WAAYD,EAAI,IAAOC,WAAYD,EAAI,IAE/E,MAECb,EAAM3B,GAAQC,CA1BhB,CAgCD,CAEA,IAAMyC,EAAkB,IAAIC,EAAiBpC,KAAKqC,cAAgBpC,EAAMD,KAAKiB,iBAI7E,OAHAkB,EAAgBG,eAAgBtC,KAAKuC,aACrCJ,EAAgBK,WAAYxC,KAAKX,SACjC8C,EAAgBM,aAAcnB,GACvBa,CAER,KAACnD,CAAA,CApIa,CAAS0D,EAAAA,KAuJlBN,EAAe,WAEpB,SAAAA,IAA0C,IAA7BO,EAAOC,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAIE,EAAOF,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,GAACtD,EAAAA,EAAAA,GAAA,KAAA8C,GAEtCpC,KAAK2C,QAAUA,EACf3C,KAAK8C,QAAUA,EACf9C,KAAKsB,cAAgB,CAAC,EACtBtB,KAAK+C,UAAY,CAAC,EAClB/C,KAAKgD,eAAiB,GACtBhD,KAAKiD,WAAa,CAAC,EAEnBjD,KAAKuC,YAAc,YAEnBvC,KAAKkD,UAA+BL,IAAtB7C,KAAK8C,QAAQI,KAAuBlD,KAAK8C,QAAQI,KAAOC,EAAAA,IACtEnD,KAAKoD,UAA+BP,IAAtB7C,KAAK8C,QAAQM,KAAuBpD,KAAK8C,QAAQM,KAAOC,EAAAA,GAEvE,CAyXC,OAzXA7D,EAAAA,EAAAA,GAAA4C,EAAA,EAAA3C,IAAA,iBAAAC,MAED,SAAgBA,GAGf,OADAM,KAAKuC,YAAc7C,EACZM,IAER,GAAC,CAAAP,IAAA,aAAAC,MAED,SAAYA,GAEXM,KAAKX,QAAUK,CAEhB,GAAC,CAAAD,IAAA,eAAAC,MAED,SAAc4B,GAEbtB,KAAKsB,cAAgBtB,KAAKsD,QAAShC,GACnCtB,KAAK+C,UAAY,CAAC,EAClB/C,KAAKgD,eAAiB,GACtBhD,KAAKiD,WAAa,CAAC,CAEpB,GAAC,CAAAxD,IAAA,UAAAC,MAED,SAAS4B,GAER,IAAOtB,KAAK8C,QAAU,OAAOxB,EAE7B,IAAMiC,EAAY,CAAC,EAEnB,IAAM,IAAMC,KAAMlC,EAAgB,CAIjC,IAAMmC,EAAMnC,EAAekC,GAErBE,EAAS,CAAC,EAIhB,IAAM,IAAMC,KAFZJ,EAAWC,GAAOE,EAEED,EAAM,CAEzB,IAAIG,GAAO,EACPlE,EAAQ+D,EAAKE,GACXE,EAAQF,EAAK5B,cAEnB,OAAS8B,GAER,IAAK,KACL,IAAK,KACL,IAAK,KAIC7D,KAAK8C,SAAW9C,KAAK8C,QAAQgB,eAEjCpE,EAAQ,CAAEA,EAAO,GAAM,IAAKA,EAAO,GAAM,IAAKA,EAAO,GAAM,MAIvDM,KAAK8C,SAAW9C,KAAK8C,QAAQiB,gBAEb,IAAfrE,EAAO,IAA4B,IAAfA,EAAO,IAA4B,IAAfA,EAAO,KAInDkE,GAAO,GAcNA,IAEJF,EAAQG,GAAUnE,EAIpB,CAED,CAEA,OAAO6D,CAER,GAAC,CAAA9D,IAAA,UAAAC,MAED,WAEC,IAAM,IAAM8D,KAAMxD,KAAKsB,cAEtBtB,KAAKgE,OAAQR,EAIf,GAAC,CAAA/D,IAAA,WAAAC,MAED,SAAUuE,GAET,OAAOjE,KAAKiD,WAAYgB,EAEzB,GAAC,CAAAxE,IAAA,aAAAC,MAED,WAEC,IAAIwE,EAAQ,EAEZ,IAAM,IAAMV,KAAMxD,KAAKsB,cAEtBtB,KAAKgD,eAAgBkB,GAAUlE,KAAKgE,OAAQR,GAC5CxD,KAAKiD,WAAYO,GAAOU,EACxBA,IAID,OAAOlE,KAAKgD,cAEb,GAAC,CAAAvD,IAAA,SAAAC,MAED,SAAQuE,GAQP,YANwCpB,IAAnC7C,KAAK+C,UAAWkB,IAEpBjE,KAAKmE,gBAAiBF,GAIhBjE,KAAK+C,UAAWkB,EAExB,GAAC,CAAAxE,IAAA,kBAAAC,MAED,SAAiBuE,GAIhB,IAAMlE,EAAQC,KACRyD,EAAMzD,KAAKsB,cAAe2C,GAC1BG,EAAS,CAEdpC,KAAMiC,EACNf,KAAMlD,KAAKkD,MAgBZ,SAASmB,EAAeC,EAAS5E,GAEhC,IAAK0E,EAAQE,GAAb,CAEA,IAhBoB3B,EAAShD,EAgBvB4E,EAAYxE,EAAMyE,iBAAkB9E,EAAO0E,GAC3CK,EAAM1E,EAAM2E,aAjBE/B,EAiBuB5C,EAAM4C,QAf7B,kBAFShD,EAiB6B4E,EAAU5E,MAf5B,KAARA,EACxB,GAGH,gBAAgBgF,KAAMhF,GAAeA,EAEnCgD,EAAUhD,IAWjB8E,EAAIG,OAAOC,KAAMN,EAAUO,OAC3BL,EAAIM,OAAOF,KAAMN,EAAUQ,QAE3BN,EAAIO,MAAQjF,EAAMqD,KAClBqB,EAAIQ,MAAQlF,EAAMqD,KAED,QAAZkB,GAAiC,gBAAZA,IAEzBG,EAAIS,SAAWC,EAAAA,KAIhBf,EAAQE,GAAYG,CAjBW,CAmBhC,CAEA,IAAM,IAAMd,KAAQF,EAAM,CAEzB,IAAM/D,EAAQ+D,EAAKE,GACfyB,OAAC,EAEL,GAAe,KAAV1F,EAEL,OAASiE,EAAK5B,eAIb,IAAK,KAIJqC,EAAOiB,OAAQ,IAAIC,EAAAA,KAAQC,UAAW7F,GAAQ8F,sBAE9C,MAED,IAAK,KAGJpB,EAAOqB,UAAW,IAAIH,EAAAA,KAAQC,UAAW7F,GAAQ8F,sBAEjD,MAED,IAAK,KAGJpB,EAAOsB,UAAW,IAAIJ,EAAAA,KAAQC,UAAW7F,GAAQ8F,sBAEjD,MAED,IAAK,SAIJnB,EAAe,MAAO3E,GAEtB,MAED,IAAK,SAIJ2E,EAAe,cAAe3E,GAE9B,MAED,IAAK,SAIJ2E,EAAe,cAAe3E,GAE9B,MAED,IAAK,OAEJ2E,EAAe,YAAa3E,GAE5B,MAED,IAAK,WACL,IAAK,OAIJ2E,EAAe,UAAW3E,GAE1B,MAED,IAAK,QAIJ2E,EAAe,WAAY3E,GAC3B0E,EAAOuB,aAAc,EAErB,MAED,IAAK,KAKJvB,EAAOwB,UAAY1D,WAAYxC,GAE/B,MAED,IAAK,KACJ0F,EAAIlD,WAAYxC,IAEP,IAER0E,EAAOyB,QAAUT,EACjBhB,EAAOuB,aAAc,GAItB,MAED,IAAK,KACJP,EAAIlD,WAAYxC,GAEXM,KAAK8C,SAAW9C,KAAK8C,QAAQgD,mBAAmBV,EAAI,EAAIA,GAExDA,EAAI,IAERhB,EAAOyB,QAAU,EAAIT,EACrBhB,EAAOuB,aAAc,GAWzB,CAGA,OADA3F,KAAK+C,UAAWkB,GAAiB,IAAI8B,EAAAA,IAAmB3B,GACjDpE,KAAK+C,UAAWkB,EAExB,GAAC,CAAAxE,IAAA,mBAAAC,MAED,SAAkBA,EAAOsG,GAExB,IAQIpE,EARE2C,EAAY,CAEjBO,MAAO,IAAImB,EAAAA,IAAS,EAAG,GACvBlB,OAAQ,IAAIkB,EAAAA,IAAS,EAAG,IAInBC,EAAQxG,EAAMyB,MAAO,OA+B3B,OA5BAS,EAAMsE,EAAMrE,QAAS,SAET,IAEXmE,EAAUG,UAAYjE,WAAYgE,EAAOtE,EAAM,IAC/CsE,EAAME,OAAQxE,EAAK,KAIpBA,EAAMsE,EAAMrE,QAAS,QAET,IAEX0C,EAAUO,MAAMuB,IAAKnE,WAAYgE,EAAOtE,EAAM,IAAOM,WAAYgE,EAAOtE,EAAM,KAC9EsE,EAAME,OAAQxE,EAAK,KAIpBA,EAAMsE,EAAMrE,QAAS,QAET,IAEX0C,EAAUQ,OAAOsB,IAAKnE,WAAYgE,EAAOtE,EAAM,IAAOM,WAAYgE,EAAOtE,EAAM,KAC/EsE,EAAME,OAAQxE,EAAK,IAIpB2C,EAAU5E,IAAMuG,EAAMI,KAAM,KAAM5E,OAC3B6C,CAER,GAAC,CAAA9E,IAAA,cAAAC,MAED,SAAaC,EAAK4G,EAAS3G,EAAQC,EAAYC,GAE9C,IAAMT,OAA6BwD,IAAjB7C,KAAKX,QAA0BW,KAAKX,QAAUmH,EAAAA,IAC5DrG,EAASd,EAAQoH,WAAY9G,GAEjB,OAAXQ,IAEJA,EAAS,IAAIuG,EAAAA,IAAerH,IAIxBc,EAAOmC,gBAAiBnC,EAAOmC,eAAgBtC,KAAKuC,aAEzD,IAAMoE,EAAUxG,EAAOO,KAAMf,EAAKC,EAAQC,EAAYC,GAItD,YAFiB+C,IAAZ0D,IAAwBI,EAAQJ,QAAUA,GAExCI,CAER,KAACvE,CAAA,CAzYmB,E,4GCvJfwE,EAAkB,gBAElBC,EAA4B,WAE5BC,EAAwB,WAExBC,EAAmB,WACnBC,EAAsC,MAEtCC,EAAM,IAAIC,EAAAA,IACVC,EAAM,IAAID,EAAAA,IACVE,EAAM,IAAIF,EAAAA,IAEVG,EAAM,IAAIH,EAAAA,IACVI,EAAM,IAAIJ,EAAAA,IAEVK,EAAS,IAAIjC,EAAAA,IAEnB,SAASkC,IAER,IAAMC,EAAQ,CACbC,QAAS,GACTC,OAAQ,CAAC,EAETC,SAAU,GACVC,QAAS,GACTC,OAAQ,GACRC,IAAK,GAELhF,UAAW,CAAC,EACZiF,kBAAmB,GAEnBC,YAAa,SAAWjG,EAAMkG,GAI7B,GAAKlI,KAAK2H,SAA0C,IAAhC3H,KAAK2H,OAAOO,gBAI/B,OAFAlI,KAAK2H,OAAO3F,KAAOA,OACnBhC,KAAK2H,OAAOO,iBAAwC,IAApBA,GAKjC,IAAMC,EAAqBnI,KAAK2H,QAAiD,oBAAhC3H,KAAK2H,OAAOS,gBAAiCpI,KAAK2H,OAAOS,uBAAoBvF,EA+H9H,GA7HK7C,KAAK2H,QAA2C,oBAA1B3H,KAAK2H,OAAOU,WAEtCrI,KAAK2H,OAAOU,WAAW,GAIxBrI,KAAK2H,OAAS,CACb3F,KAAMA,GAAQ,GACdkG,iBAAuC,IAApBA,EAEnBI,SAAU,CACTV,SAAU,GACVC,QAAS,GACTC,OAAQ,GACRC,IAAK,GACLQ,cAAc,GAEfxF,UAAW,GACXyF,QAAQ,EAERC,cAAe,SAAWzG,EAAM0G,GAE/B,IAAMC,EAAW3I,KAAKqI,WAAW,GAI5BM,IAAcA,EAASC,WAAaD,EAASE,YAAc,IAE/D7I,KAAK+C,UAAUqD,OAAQuC,EAASzE,MAAO,GAIxC,IAAM4E,EAAW,CAChB5E,MAAOlE,KAAK+C,UAAUvB,OACtBQ,KAAMA,GAAQ,GACd+G,OAAUC,MAAMC,QAASP,IAAeA,EAAUlH,OAAS,EAAIkH,EAAWA,EAAUlH,OAAS,GAAM,GACnGgH,YAAuB3F,IAAb8F,EAAyBA,EAASH,OAASxI,KAAKwI,OAC1DU,gBAA2BrG,IAAb8F,EAAyBA,EAASQ,SAAW,EAC3DA,UAAY,EACZN,YAAc,EACdD,WAAW,EAEXQ,MAAO,SAAWlF,GAEjB,IAAMmF,EAAS,CACdnF,MAA0B,kBAAVA,EAAqBA,EAAQlE,KAAKkE,MAClDlC,KAAMhC,KAAKgC,KACX+G,OAAQ/I,KAAK+I,OACbP,OAAQxI,KAAKwI,OACbU,WAAY,EACZC,UAAY,EACZN,YAAc,EACdD,WAAW,GAGZ,OADAS,EAAOD,MAAQpJ,KAAKoJ,MAAME,KAAMD,GACzBA,CAER,GAKD,OAFArJ,KAAK+C,UAAUwG,KAAMT,GAEdA,CAER,EAEAV,gBAAiB,WAEhB,GAAKpI,KAAK+C,UAAUvB,OAAS,EAE5B,OAAOxB,KAAK+C,UAAW/C,KAAK+C,UAAUvB,OAAS,EAMjD,EAEA6G,UAAW,SAAWmB,GAErB,IAAMC,EAAoBzJ,KAAKoI,kBAU/B,GATKqB,IAAsD,IAAjCA,EAAkBN,WAE3CM,EAAkBN,SAAWnJ,KAAKsI,SAASV,SAASpG,OAAS,EAC7DiI,EAAkBZ,WAAaY,EAAkBN,SAAWM,EAAkBP,WAC9EO,EAAkBb,WAAY,GAK1BY,GAAOxJ,KAAK+C,UAAUvB,OAAS,EAEnC,IAAM,IAAIkI,EAAK1J,KAAK+C,UAAUvB,OAAS,EAAGkI,GAAM,EAAGA,IAE7C1J,KAAK+C,UAAW2G,GAAKb,YAAc,GAEvC7I,KAAK+C,UAAUqD,OAAQsD,EAAI,GAkB9B,OATKF,GAAiC,IAA1BxJ,KAAK+C,UAAUvB,QAE1BxB,KAAK+C,UAAUwG,KAAM,CACpBvH,KAAM,GACNwG,OAAQxI,KAAKwI,SAKRiB,CAER,GASItB,GAAoBA,EAAiBnG,MAA0C,oBAA3BmG,EAAiBiB,MAAuB,CAEhG,IAAMO,EAAWxB,EAAiBiB,MAAO,GACzCO,EAASf,WAAY,EACrB5I,KAAK2H,OAAO5E,UAAUwG,KAAMI,EAE7B,CAEA3J,KAAK0H,QAAQ6B,KAAMvJ,KAAK2H,OAEzB,EAEAiC,SAAU,WAEJ5J,KAAK2H,QAA2C,oBAA1B3H,KAAK2H,OAAOU,WAEtCrI,KAAK2H,OAAOU,WAAW,EAIzB,EAEAwB,iBAAkB,SAAWnK,EAAOoK,GAEnC,IAAM5F,EAAQ6F,SAAUrK,EAAO,IAC/B,OAAsD,GAA7CwE,GAAS,EAAIA,EAAQ,EAAIA,EAAQ4F,EAAM,EAEjD,EAEAE,iBAAkB,SAAWtK,EAAOoK,GAEnC,IAAM5F,EAAQ6F,SAAUrK,EAAO,IAC/B,OAAsD,GAA7CwE,GAAS,EAAIA,EAAQ,EAAIA,EAAQ4F,EAAM,EAEjD,EAEAG,aAAc,SAAWvK,EAAOoK,GAE/B,IAAM5F,EAAQ6F,SAAUrK,EAAO,IAC/B,OAAsD,GAA7CwE,GAAS,EAAIA,EAAQ,EAAIA,EAAQ4F,EAAM,EAEjD,EAEAI,UAAW,SAAWC,EAAGC,EAAGC,GAE3B,IAAMC,EAAMtK,KAAK4H,SACX2C,EAAMvK,KAAK2H,OAAOW,SAASV,SAEjC2C,EAAIhB,KAAMe,EAAKH,EAAI,GAAKG,EAAKH,EAAI,GAAKG,EAAKH,EAAI,IAC/CI,EAAIhB,KAAMe,EAAKF,EAAI,GAAKE,EAAKF,EAAI,GAAKE,EAAKF,EAAI,IAC/CG,EAAIhB,KAAMe,EAAKD,EAAI,GAAKC,EAAKD,EAAI,GAAKC,EAAKD,EAAI,GAEhD,EAEAG,eAAgB,SAAWL,GAE1B,IAAMG,EAAMtK,KAAK4H,SACL5H,KAAK2H,OAAOW,SAASV,SAE7B2B,KAAMe,EAAKH,EAAI,GAAKG,EAAKH,EAAI,GAAKG,EAAKH,EAAI,GAEhD,EAEAM,cAAe,SAAWN,GAEzB,IAAMG,EAAMtK,KAAK4H,SACL5H,KAAK2H,OAAOW,SAASV,SAE7B2B,KAAMe,EAAKH,EAAI,GAAKG,EAAKH,EAAI,GAAKG,EAAKH,EAAI,GAEhD,EAEAO,UAAW,SAAWP,EAAGC,EAAGC,GAE3B,IAAMC,EAAMtK,KAAK6H,QACX0C,EAAMvK,KAAK2H,OAAOW,SAAST,QAEjC0C,EAAIhB,KAAMe,EAAKH,EAAI,GAAKG,EAAKH,EAAI,GAAKG,EAAKH,EAAI,IAC/CI,EAAIhB,KAAMe,EAAKF,EAAI,GAAKE,EAAKF,EAAI,GAAKE,EAAKF,EAAI,IAC/CG,EAAIhB,KAAMe,EAAKD,EAAI,GAAKC,EAAKD,EAAI,GAAKC,EAAKD,EAAI,GAEhD,EAEAM,cAAe,SAAWR,EAAGC,EAAGC,GAE/B,IAAMC,EAAMtK,KAAK4H,SACX2C,EAAMvK,KAAK2H,OAAOW,SAAST,QAEjCZ,EAAI1B,UAAW+E,EAAKH,GACpBhD,EAAI5B,UAAW+E,EAAKF,GACpBhD,EAAI7B,UAAW+E,EAAKD,GAEpB/C,EAAIsD,WAAYxD,EAAKD,GACrBE,EAAIuD,WAAY3D,EAAKE,GACrBG,EAAIuD,MAAOxD,GAEXC,EAAIwD,YAEJP,EAAIhB,KAAMjC,EAAIyD,EAAGzD,EAAI0D,EAAG1D,EAAI2D,GAC5BV,EAAIhB,KAAMjC,EAAIyD,EAAGzD,EAAI0D,EAAG1D,EAAI2D,GAC5BV,EAAIhB,KAAMjC,EAAIyD,EAAGzD,EAAI0D,EAAG1D,EAAI2D,EAE7B,EAEAC,SAAU,SAAWf,EAAGC,EAAGC,GAE1B,IAAMC,EAAMtK,KAAK8H,OACXyC,EAAMvK,KAAK2H,OAAOW,SAASR,YAEfjF,IAAbyH,EAAKH,IAAoBI,EAAIhB,KAAMe,EAAKH,EAAI,GAAKG,EAAKH,EAAI,GAAKG,EAAKH,EAAI,SAC3DtH,IAAbyH,EAAKF,IAAoBG,EAAIhB,KAAMe,EAAKF,EAAI,GAAKE,EAAKF,EAAI,GAAKE,EAAKF,EAAI,SAC3DvH,IAAbyH,EAAKD,IAAoBE,EAAIhB,KAAMe,EAAKD,EAAI,GAAKC,EAAKD,EAAI,GAAKC,EAAKD,EAAI,GAE9E,EAEAc,MAAO,SAAWhB,EAAGC,EAAGC,GAEvB,IAAMC,EAAMtK,KAAK+H,IACXwC,EAAMvK,KAAK2H,OAAOW,SAASP,IAEjCwC,EAAIhB,KAAMe,EAAKH,EAAI,GAAKG,EAAKH,EAAI,IACjCI,EAAIhB,KAAMe,EAAKF,EAAI,GAAKE,EAAKF,EAAI,IACjCG,EAAIhB,KAAMe,EAAKD,EAAI,GAAKC,EAAKD,EAAI,GAElC,EAEAe,aAAc,WAEb,IAAMb,EAAMvK,KAAK2H,OAAOW,SAASP,IAEjCwC,EAAIhB,KAAM,EAAG,GACbgB,EAAIhB,KAAM,EAAG,GACbgB,EAAIhB,KAAM,EAAG,EAEd,EAEA8B,UAAW,SAAWlB,GAErB,IAAMG,EAAMtK,KAAK+H,IACL/H,KAAK2H,OAAOW,SAASP,IAE7BwB,KAAMe,EAAKH,EAAI,GAAKG,EAAKH,EAAI,GAElC,EAEAmB,QAAS,SAAWnB,EAAGC,EAAGC,EAAGkB,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAEhD,IAAMC,EAAO7L,KAAK4H,SAASpG,OAEvBsK,EAAK9L,KAAK6J,iBAAkBM,EAAG0B,GAC/BE,EAAK/L,KAAK6J,iBAAkBO,EAAGyB,GAC/BG,EAAKhM,KAAK6J,iBAAkBQ,EAAGwB,GAOnC,GALA7L,KAAKkK,UAAW4B,EAAIC,EAAIC,GACxBhM,KAAKkL,SAAUY,EAAIC,EAAIC,QAIXnJ,IAAP6I,GAA2B,KAAPA,EAAY,CAEpC,IAAMO,EAAOjM,KAAK6H,QAAQrG,OAE1BsK,EAAK9L,KAAKgK,iBAAkB0B,EAAIO,GAChCF,EAAK/L,KAAKgK,iBAAkB2B,EAAIM,GAChCD,EAAKhM,KAAKgK,iBAAkB4B,EAAIK,GAEhCjM,KAAK0K,UAAWoB,EAAIC,EAAIC,EAEzB,MAEChM,KAAK2K,cAAemB,EAAIC,EAAIC,GAM7B,QAAYnJ,IAAP0I,GAA2B,KAAPA,EAAY,CAEpC,IAAMW,EAAQlM,KAAK+H,IAAIvG,OAEvBsK,EAAK9L,KAAKiK,aAAcsB,EAAIW,GAC5BH,EAAK/L,KAAKiK,aAAcuB,EAAIU,GAC5BF,EAAKhM,KAAKiK,aAAcwB,EAAIS,GAE5BlM,KAAKmL,MAAOW,EAAIC,EAAIC,GAEpBhM,KAAK2H,OAAOW,SAASC,cAAe,CAErC,MAICvI,KAAKoL,cAIP,EAEAe,iBAAkB,SAAWvE,GAE5B5H,KAAK2H,OAAOW,SAAS8D,KAAO,SAI5B,IAFA,IAAMP,EAAO7L,KAAK4H,SAASpG,OAEjB6K,EAAK,EAAGC,EAAI1E,EAASpG,OAAQ6K,EAAKC,EAAGD,IAAQ,CAEtD,IAAMnI,EAAQlE,KAAK6J,iBAAkBjC,EAAUyE,GAAMR,GAErD7L,KAAKwK,eAAgBtG,GACrBlE,KAAKkL,SAAUhH,EAEhB,CAED,EAEAqI,gBAAiB,SAAW3E,EAAUG,GAErC/H,KAAK2H,OAAOW,SAAS8D,KAAO,OAK5B,IAHA,IAAMP,EAAO7L,KAAK4H,SAASpG,OACrB0K,EAAQlM,KAAK+H,IAAIvG,OAEb6K,EAAK,EAAGC,EAAI1E,EAASpG,OAAQ6K,EAAKC,EAAGD,IAE9CrM,KAAKyK,cAAezK,KAAK6J,iBAAkBjC,EAAUyE,GAAMR,IAI5D,IAAM,IAAIW,EAAM,EAAGF,EAAIvE,EAAIvG,OAAQgL,EAAMF,EAAGE,IAE3CxM,KAAKqL,UAAWrL,KAAKiK,aAAclC,EAAKyE,GAAON,GAIjD,GAMD,OAFAzE,EAAMQ,YAAa,IAAI,GAEhBR,CAER,CAEA,IAEMgF,EAAS,SAAAxN,IAAAC,EAAAA,EAAAA,GAAAuN,EAAAxN,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAqN,GAEd,SAAAA,EAAapN,GAAU,IAAAqN,EAIA,OAJApN,EAAAA,EAAAA,GAAA,KAAAmN,IAEtBC,EAAAvN,EAAAI,KAAA,KAAOF,IAEF0D,UAAY,KAAK2J,CAEvB,CAycC,OAzcAlN,EAAAA,EAAAA,GAAAiN,EAAA,EAAAhN,IAAA,OAAAC,MAED,SAAMC,EAAKC,EAAQC,EAAYC,GAE9B,IAAMC,EAAQC,KAERG,EAAS,IAAIC,EAAAA,IAAYJ,KAAKX,SACpCc,EAAOE,QAASL,KAAKC,MACrBE,EAAOG,iBAAkBN,KAAKO,eAC9BJ,EAAOK,mBAAoBR,KAAKS,iBAChCN,EAAOO,KAAMf,GAAK,SAAWgB,GAE5B,IAECf,EAAQG,EAAMa,MAAOD,GAEtB,CAAE,MAAQE,GAEJf,EAEJA,EAASe,GAITC,QAAQC,MAAOF,GAIhBd,EAAMV,QAAQ2B,UAAWrB,EAE1B,CAED,GAAGE,EAAYC,EAEhB,GAAC,CAAAL,IAAA,eAAAC,MAED,SAAcqD,GAIb,OAFA/C,KAAK+C,UAAYA,EAEV/C,IAER,GAAC,CAAAP,IAAA,QAAAC,MAED,SAAOiB,GAEN,IAAM8G,EAAQ,IAAID,GAEgB,IAA7B7G,EAAKkB,QAAS,UAGlBlB,EAAOA,EAAKgM,QAAS,QAAS,QAIG,IAA7BhM,EAAKkB,QAAS,UAGlBlB,EAAOA,EAAKgM,QAAS,QAAS,KAO/B,IAHA,IAAMzL,EAAQP,EAAKQ,MAAO,MACtByL,EAAS,GAEHrL,EAAI,EAAG+K,EAAIpL,EAAMM,OAAQD,EAAI+K,EAAG/K,IAAO,CAEhD,IAAME,EAAOP,EAAOK,GAAIsL,YAExB,GAAqB,IAAhBpL,EAAKD,OAAV,CAEA,IAAMsL,EAAgBrL,EAAKE,OAAQ,GAGnC,GAAuB,MAAlBmL,EAEL,GAAuB,MAAlBA,EAAwB,CAE5B,IAAMC,EAAOtL,EAAKN,MAAO6F,GAEzB,OAAS+F,EAAM,IAEd,IAAK,IACJtF,EAAMG,SAAS2B,KACdrH,WAAY6K,EAAM,IAClB7K,WAAY6K,EAAM,IAClB7K,WAAY6K,EAAM,KAEdA,EAAKvL,QAAU,GAEnB+F,EAAOyF,OACN9K,WAAY6K,EAAM,IAClB7K,WAAY6K,EAAM,IAClB7K,WAAY6K,EAAM,KACjBvH,sBAEFiC,EAAMK,OAAOyB,KAAMhC,EAAO0F,EAAG1F,EAAO2F,EAAG3F,EAAO6C,IAM9C3C,EAAMK,OAAOyB,UAAM1G,OAAWA,OAAWA,GAI1C,MACD,IAAK,KACJ4E,EAAMI,QAAQ0B,KACbrH,WAAY6K,EAAM,IAClB7K,WAAY6K,EAAM,IAClB7K,WAAY6K,EAAM,KAEnB,MACD,IAAK,KACJtF,EAAMM,IAAIwB,KACTrH,WAAY6K,EAAM,IAClB7K,WAAY6K,EAAM,KAMtB,MAAO,GAAuB,MAAlBD,EAAwB,CAQnC,IANA,IACMK,EADW1L,EAAK2L,MAAO,GAAI1L,OACLP,MAAO6F,GAC7BqG,EAAe,GAIXC,EAAI,EAAGC,EAAKJ,EAAW3L,OAAQ8L,EAAIC,EAAID,IAAO,CAEvD,IAAME,EAASL,EAAYG,GAE3B,GAAKE,EAAOhM,OAAS,EAAI,CAExB,IAAMiM,EAAcD,EAAOrM,MAAO,KAClCkM,EAAa9D,KAAMkE,EAEpB,CAED,CAMA,IAFA,IAAMC,EAAKL,EAAc,GAEfC,EAAI,EAAGC,EAAKF,EAAa7L,OAAS,EAAG8L,EAAIC,EAAID,IAAO,CAE7D,IAAMK,EAAKN,EAAcC,GACnBM,EAAKP,EAAcC,EAAI,GAE7B7F,EAAM6D,QACLoC,EAAI,GAAKC,EAAI,GAAKC,EAAI,GACtBF,EAAI,GAAKC,EAAI,GAAKC,EAAI,GACtBF,EAAI,GAAKC,EAAI,GAAKC,EAAI,GAGxB,CAED,MAAO,GAAuB,MAAlBd,EAAwB,CAEnC,IAAMe,EAAYpM,EAAKK,UAAW,GAAIJ,OAAOP,MAAO,KAChD2M,EAAe,GACbC,EAAU,GAEhB,IAA+B,IAA1BtM,EAAKI,QAAS,KAElBiM,EAAeD,OAIf,IAAM,IAAIG,EAAK,EAAGC,EAAOJ,EAAUrM,OAAQwM,EAAKC,EAAMD,IAAQ,CAE7D,IAAME,EAAQL,EAAWG,GAAK7M,MAAO,KAEjB,KAAf+M,EAAO,IAAaJ,EAAavE,KAAM2E,EAAO,IAC/B,KAAfA,EAAO,IAAaH,EAAQxE,KAAM2E,EAAO,GAE/C,CAIDzG,EAAM8E,gBAAiBuB,EAAcC,EAEtC,MAAO,GAAuB,MAAlBjB,EAAwB,CAEnC,IACMqB,EADW1M,EAAK2L,MAAO,GAAI1L,OACNP,MAAO,KAElCsG,EAAM0E,iBAAkBgC,EAEzB,MAAO,GAAmD,QAA5CvB,EAAShG,EAAgBwH,KAAM3M,IAAoB,CAQhE,IAAMO,GAAS,IAAM4K,EAAQ,GAAIQ,MAAO,GAAI1L,QAAS0L,MAAO,GAE5D3F,EAAMQ,YAAajG,EAEpB,MAAO,GAAK8E,EAAsBnC,KAAMlD,GAIvCgG,EAAME,OAAOc,cAAehH,EAAKK,UAAW,GAAIJ,OAAQ+F,EAAMO,wBAExD,GAAKnB,EAA0BlC,KAAMlD,GAI3CgG,EAAMO,kBAAkBuB,KAAM9H,EAAKK,UAAW,GAAIJ,aAE5C,GAAKqF,EAAiBpC,KAAMlD,GAKlCX,QAAQuN,KAAM,6GAER,GAAuB,MAAlBvB,EAAwB,CAsBnC,IApBAF,EAASnL,EAAKN,MAAO,MAoBTK,OAAS,EAAI,CAExB,IAAM9B,EAAQkN,EAAQ,GAAIlL,OAAOK,cACjC0F,EAAME,OAAOa,OAAqB,MAAV9I,GAA2B,QAAVA,CAE1C,MAGC+H,EAAME,OAAOa,QAAS,EAIvB,IAAMM,EAAWrB,EAAME,OAAOS,kBACzBU,IAAWA,EAASN,OAASf,EAAME,OAAOa,OAEhD,KAAO,CAGN,GAAc,OAAT/G,EAAgB,SAErBX,QAAQuN,KAAM,sCAAwC5M,EAAO,IAE9D,CAvMiC,CAyMlC,CAEAgG,EAAMmC,WAEN,IAAM0E,EAAY,IAAIC,EAAAA,IAKtB,GAJAD,EAAUtG,kBAAoB,GAAGwG,OAAQ/G,EAAMO,oBAIxB,MAF4B,IAAzBP,EAAMC,QAAQlG,QAAgE,IAAhDiG,EAAMC,QAAS,GAAIY,SAASV,SAASpG,QAI5F,IAAM,IAAID,EAAI,EAAG+K,EAAI7E,EAAMC,QAAQlG,OAAQD,EAAI+K,EAAG/K,IAAO,CAExD,IAAMoG,EAASF,EAAMC,QAASnG,GACxB+G,EAAWX,EAAOW,SAClBvF,EAAY4E,EAAO5E,UACnB0L,EAA6B,SAAlBnG,EAAS8D,KACpBsC,EAA+B,WAAlBpG,EAAS8D,KACxBuC,GAAkB,EAGtB,GAAkC,IAA7BrG,EAASV,SAASpG,OAAvB,CAEA,IAAMoN,EAAiB,IAAIC,EAAAA,IAE3BD,EAAeE,aAAc,WAAY,IAAIC,EAAAA,IAAwBzG,EAASV,SAAU,IAEnFU,EAAST,QAAQrG,OAAS,GAE9BoN,EAAeE,aAAc,SAAU,IAAIC,EAAAA,IAAwBzG,EAAST,QAAS,IAIjFS,EAASR,OAAOtG,OAAS,IAE7BmN,GAAkB,EAClBC,EAAeE,aAAc,QAAS,IAAIC,EAAAA,IAAwBzG,EAASR,OAAQ,MAIrD,IAA1BQ,EAASC,cAEbqG,EAAeE,aAAc,KAAM,IAAIC,EAAAA,IAAwBzG,EAASP,IAAK,IAQ9E,IAFA,IAAMiH,EAAmB,GAEftF,EAAK,EAAGuF,EAAQlM,EAAUvB,OAAQkI,EAAKuF,EAAOvF,IAAQ,CAE/D,IAAMwF,EAAiBnM,EAAW2G,GAC5ByF,EAAeD,EAAelN,KAAO,IAAMkN,EAAe1G,OAAS,IAAMmG,EAC3E7F,EAAWrB,EAAM1E,UAAWoM,GAEhC,GAAwB,OAAnBnP,KAAK+C,UAKT,GAHA+F,EAAW9I,KAAK+C,UAAUiB,OAAQkL,EAAelN,OAG5CyM,IAAU3F,GAAgBA,aAAoBsG,EAAAA,KAO5C,GAAKV,GAAY5F,KAAgBA,aAAoBuG,EAAAA,KAAmB,CAE9E,IAAMC,GAAiB,IAAID,EAAAA,IAAgB,CAAEE,KAAM,GAAIC,iBAAiB,IACxEC,EAAAA,IAAAA,UAAAA,KAAAA,KAA8BH,GAAgBxG,GAC9CwG,GAAejK,MAAMR,KAAMiE,EAASzD,OACpCiK,GAAe7K,IAAMqE,EAASrE,IAC9BqE,EAAWwG,EAEZ,MAfyE,CAExE,IAAMI,GAAe,IAAIN,EAAAA,IACzBK,EAAAA,IAAAA,UAAAA,KAAAA,KAA8BC,GAAc5G,GAC5C4G,GAAarK,MAAMR,KAAMiE,EAASzD,OAClCyD,EAAW4G,EAEZ,MAYiB7M,IAAbiG,KAIHA,EAFI2F,EAEO,IAAIW,EAAAA,IAEJV,EAEA,IAAIW,EAAAA,IAAgB,CAAEE,KAAM,EAAGC,iBAAiB,IAIhD,IAAIzJ,EAAAA,KAIP/D,KAAOkN,EAAelN,KAC/B8G,EAAS6G,aAAcT,EAAe1G,OACtCM,EAAS8G,aAAejB,EAExBlH,EAAM1E,UAAWoM,GAAiBrG,GAInCkG,EAAiBzF,KAAMT,EAExB,CAIA,IAAI+G,QAAI,EAER,GAAKb,EAAiBxN,OAAS,EAAI,CAElC,IAAM,IAAIkI,GAAK,EAAGuF,GAAQlM,EAAUvB,OAAQkI,GAAKuF,GAAOvF,KAAQ,CAE/D,IAAMwF,GAAiBnM,EAAW2G,IAClCkF,EAAekB,SAAUZ,GAAehG,WAAYgG,GAAerG,WAAYa,GAEhF,CAICmG,GAFIpB,EAEG,IAAIsB,EAAAA,IAAcnB,EAAgBI,GAE9BN,EAEJ,IAAIsB,EAAAA,IAAQpB,EAAgBI,GAI5B,IAAIiB,EAAAA,IAAMrB,EAAgBI,EAInC,MAIEa,GAFIpB,EAEG,IAAIsB,EAAAA,IAAcnB,EAAgBI,EAAkB,IAEhDN,EAEJ,IAAIsB,EAAAA,IAAQpB,EAAgBI,EAAkB,IAI9C,IAAIiB,EAAAA,IAAMrB,EAAgBI,EAAkB,IAMrDa,GAAK7N,KAAO2F,EAAO3F,KAEnBsM,EAAU4B,IAAKL,GAtI+B,CAwI/C,MAMA,GAAKpI,EAAMG,SAASpG,OAAS,EAAI,CAEhC,IAAMsH,GAAW,IAAIuG,EAAAA,IAAgB,CAAEE,KAAM,EAAGC,iBAAiB,IAE3DZ,GAAiB,IAAIC,EAAAA,IAE3BD,GAAeE,aAAc,WAAY,IAAIC,EAAAA,IAAwBtH,EAAMG,SAAU,IAEhFH,EAAMK,OAAOtG,OAAS,QAA2BqB,IAAtB4E,EAAMK,OAAQ,KAE7C8G,GAAeE,aAAc,QAAS,IAAIC,EAAAA,IAAwBtH,EAAMK,OAAQ,IAChFgB,GAAS8G,cAAe,GAIzB,IAAMO,GAAS,IAAIH,EAAAA,IAAQpB,GAAgB9F,IAC3CwF,EAAU4B,IAAKC,GAEhB,CAID,OAAO7B,CAER,KAAC7B,CAAA,CAjda,CAAS/J,EAAAA,I","sources":["../node_modules/three/examples/jsm/loaders/MTLLoader.js","../node_modules/three/examples/jsm/loaders/OBJLoader.js"],"sourcesContent":["import {\n\tColor,\n\tDefaultLoadingManager,\n\tFileLoader,\n\tFrontSide,\n\tLoader,\n\tLoaderUtils,\n\tMeshPhongMaterial,\n\tRepeatWrapping,\n\tTextureLoader,\n\tVector2,\n\tsRGBEncoding\n} from 'three';\n\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nclass MTLLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to load.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tsetMaterialOptions( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {MaterialCreator}\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to parse.\n\t */\n\tparse( text, path ) {\n\n\t\tconst lines = text.split( '\\n' );\n\t\tlet info = {};\n\t\tconst delimiter_pattern = /\\s+/;\n\t\tconst materialsInfo = {};\n\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlet line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst pos = line.indexOf( ' ' );\n\n\t\t\tlet key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tlet value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tconst ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst materialCreator = new MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n}\n\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nclass MaterialCreator {\n\n\tconstructor( baseUrl = '', options = {} ) {\n\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.crossOrigin = 'anonymous';\n\n\t\tthis.side = ( this.options.side !== undefined ) ? this.options.side : FrontSide;\n\t\tthis.wrap = ( this.options.wrap !== undefined ) ? this.options.wrap : RepeatWrapping;\n\n\t}\n\n\tsetCrossOrigin( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t}\n\n\tsetManager( value ) {\n\n\t\tthis.manager = value;\n\n\t}\n\n\tsetMaterials( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t}\n\n\tconvert( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tconst converted = {};\n\n\t\tfor ( const mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tconst mat = materialsInfo[ mn ];\n\n\t\t\tconst covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( const prop in mat ) {\n\n\t\t\t\tlet save = true;\n\t\t\t\tlet value = mat[ prop ];\n\t\t\t\tconst lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t}\n\n\tpreload() {\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t}\n\n\tgetIndex( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t}\n\n\tgetAsArray() {\n\n\t\tlet index = 0;\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t}\n\n\tcreate( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tcreateMaterial_( materialName ) {\n\n\t\t// Create material\n\n\t\tconst scope = this;\n\t\tconst mat = this.materialsInfo[ materialName ];\n\t\tconst params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tconst texParams = scope.getTextureParams( value, params );\n\t\t\tconst map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tif ( mapType === 'map' || mapType === 'emissiveMap' ) {\n\n\t\t\t\tmap.encoding = sRGBEncoding;\n\n\t\t\t}\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( const prop in mat ) {\n\n\t\t\tconst value = mat[ prop ];\n\t\t\tlet n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = new Color().fromArray( value ).convertSRGBToLinear();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( 'map', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( 'specularMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( 'emissiveMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( 'normalMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( 'bumpMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( 'alphaMap', value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tgetTextureParams( value, matParams ) {\n\n\t\tconst texParams = {\n\n\t\t\tscale: new Vector2( 1, 1 ),\n\t\t\toffset: new Vector2( 0, 0 )\n\n\t\t };\n\n\t\tconst items = value.split( /\\s+/ );\n\t\tlet pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t}\n\n\tloadTexture( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tconst manager = ( this.manager !== undefined ) ? this.manager : DefaultLoadingManager;\n\t\tlet loader = manager.getHandler( url );\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\n\t\tconst texture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { MTLLoader };\n","import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoader,\n\tMaterial,\n\tMesh,\n\tMeshPhongMaterial,\n\tPoints,\n\tPointsMaterial,\n\tVector3,\n\tColor\n} from 'three';\n\n// o object_name | g group_name\nconst _object_pattern = /^[og]\\s*(.+)?/;\n// mtllib file_reference\nconst _material_library_pattern = /^mtllib /;\n// usemtl material_name\nconst _material_use_pattern = /^usemtl /;\n// usemap map_name\nconst _map_use_pattern = /^usemap /;\nconst _face_vertex_data_separator_pattern = /\\s+/;\n\nconst _vA = new Vector3();\nconst _vB = new Vector3();\nconst _vC = new Vector3();\n\nconst _ab = new Vector3();\nconst _cb = new Vector3();\n\nconst _color = new Color();\n\nfunction ParserState() {\n\n\tconst state = {\n\t\tobjects: [],\n\t\tobject: {},\n\n\t\tvertices: [],\n\t\tnormals: [],\n\t\tcolors: [],\n\t\tuvs: [],\n\n\t\tmaterials: {},\n\t\tmaterialLibraries: [],\n\n\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\tthis.object.name = name;\n\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\tthis.object._finalize( true );\n\n\t\t\t}\n\n\t\t\tthis.object = {\n\t\t\t\tname: name || '',\n\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\tgeometry: {\n\t\t\t\t\tvertices: [],\n\t\t\t\t\tnormals: [],\n\t\t\t\t\tcolors: [],\n\t\t\t\t\tuvs: [],\n\t\t\t\t\thasUVIndices: false\n\t\t\t\t},\n\t\t\t\tmaterials: [],\n\t\t\t\tsmooth: true,\n\n\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\tconst previous = this._finalize( false );\n\n\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst material = {\n\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\tconst cloned = {\n\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\treturn material;\n\n\t\t\t\t},\n\n\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t},\n\n\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\tconst lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\tfor ( let mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Inherit previous objects material.\n\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\tconst declared = previousMaterial.clone( 0 );\n\t\t\t\tdeclared.inherited = true;\n\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t}\n\n\t\t\tthis.objects.push( this.object );\n\n\t\t},\n\n\t\tfinalize: function () {\n\n\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\tthis.object._finalize( true );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\tconst index = parseInt( value, 10 );\n\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t},\n\n\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\tconst index = parseInt( value, 10 );\n\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t},\n\n\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\tconst index = parseInt( value, 10 );\n\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t},\n\n\t\taddVertex: function ( a, b, c ) {\n\n\t\t\tconst src = this.vertices;\n\t\t\tconst dst = this.object.geometry.vertices;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t},\n\n\t\taddVertexPoint: function ( a ) {\n\n\t\t\tconst src = this.vertices;\n\t\t\tconst dst = this.object.geometry.vertices;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t},\n\n\t\taddVertexLine: function ( a ) {\n\n\t\t\tconst src = this.vertices;\n\t\t\tconst dst = this.object.geometry.vertices;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t},\n\n\t\taddNormal: function ( a, b, c ) {\n\n\t\t\tconst src = this.normals;\n\t\t\tconst dst = this.object.geometry.normals;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t},\n\n\t\taddFaceNormal: function ( a, b, c ) {\n\n\t\t\tconst src = this.vertices;\n\t\t\tconst dst = this.object.geometry.normals;\n\n\t\t\t_vA.fromArray( src, a );\n\t\t\t_vB.fromArray( src, b );\n\t\t\t_vC.fromArray( src, c );\n\n\t\t\t_cb.subVectors( _vC, _vB );\n\t\t\t_ab.subVectors( _vA, _vB );\n\t\t\t_cb.cross( _ab );\n\n\t\t\t_cb.normalize();\n\n\t\t\tdst.push( _cb.x, _cb.y, _cb.z );\n\t\t\tdst.push( _cb.x, _cb.y, _cb.z );\n\t\t\tdst.push( _cb.x, _cb.y, _cb.z );\n\n\t\t},\n\n\t\taddColor: function ( a, b, c ) {\n\n\t\t\tconst src = this.colors;\n\t\t\tconst dst = this.object.geometry.colors;\n\n\t\t\tif ( src[ a ] !== undefined ) dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\tif ( src[ b ] !== undefined ) dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\tif ( src[ c ] !== undefined ) dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t},\n\n\t\taddUV: function ( a, b, c ) {\n\n\t\t\tconst src = this.uvs;\n\t\t\tconst dst = this.object.geometry.uvs;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t},\n\n\t\taddDefaultUV: function () {\n\n\t\t\tconst dst = this.object.geometry.uvs;\n\n\t\t\tdst.push( 0, 0 );\n\t\t\tdst.push( 0, 0 );\n\t\t\tdst.push( 0, 0 );\n\n\t\t},\n\n\t\taddUVLine: function ( a ) {\n\n\t\t\tconst src = this.uvs;\n\t\t\tconst dst = this.object.geometry.uvs;\n\n\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t},\n\n\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\tconst vLen = this.vertices.length;\n\n\t\t\tlet ia = this.parseVertexIndex( a, vLen );\n\t\t\tlet ib = this.parseVertexIndex( b, vLen );\n\t\t\tlet ic = this.parseVertexIndex( c, vLen );\n\n\t\t\tthis.addVertex( ia, ib, ic );\n\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t// normals\n\n\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\tconst nLen = this.normals.length;\n\n\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\t\t\t\tib = this.parseNormalIndex( nb, nLen );\n\t\t\t\tic = this.parseNormalIndex( nc, nLen );\n\n\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t} else {\n\n\t\t\t\tthis.addFaceNormal( ia, ib, ic );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\tconst uvLen = this.uvs.length;\n\n\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\n\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\tthis.object.geometry.hasUVIndices = true;\n\n\t\t\t} else {\n\n\t\t\t\t// add placeholder values (for inconsistent face definitions)\n\n\t\t\t\tthis.addDefaultUV();\n\n\t\t\t}\n\n\t\t},\n\n\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\tconst vLen = this.vertices.length;\n\n\t\t\tfor ( let vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\tconst index = this.parseVertexIndex( vertices[ vi ], vLen );\n\n\t\t\t\tthis.addVertexPoint( index );\n\t\t\t\tthis.addColor( index );\n\n\t\t\t}\n\n\t\t},\n\n\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\tconst vLen = this.vertices.length;\n\t\t\tconst uvLen = this.uvs.length;\n\n\t\t\tfor ( let vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t}\n\n\t\t\tfor ( let uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tstate.startObject( '', false );\n\n\treturn state;\n\n}\n\n//\n\nclass OBJLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.materials = null;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tsetMaterials( materials ) {\n\n\t\tthis.materials = materials;\n\n\t\treturn this;\n\n\t}\n\n\tparse( text ) {\n\n\t\tconst state = new ParserState();\n\n\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t}\n\n\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t}\n\n\t\tconst lines = text.split( '\\n' );\n\t\tlet result = [];\n\n\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\tconst line = lines[ i ].trimStart();\n\n\t\t\tif ( line.length === 0 ) continue;\n\n\t\t\tconst lineFirstChar = line.charAt( 0 );\n\n\t\t\t// @todo invoke passed in handler if any\n\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\tconst data = line.split( _face_vertex_data_separator_pattern );\n\n\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\tcase 'v':\n\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif ( data.length >= 7 ) {\n\n\t\t\t\t\t\t\t_color.setRGB(\n\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\t\t\t\t\t\t\t).convertSRGBToLinear();\n\n\t\t\t\t\t\t\tstate.colors.push( _color.r, _color.g, _color.b );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// if no colors are defined, add placeholders so color and vertex indices match\n\n\t\t\t\t\t\t\tstate.colors.push( undefined, undefined, undefined );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\tconst lineData = line.slice( 1 ).trim();\n\t\t\t\tconst vertexData = lineData.split( _face_vertex_data_separator_pattern );\n\t\t\t\tconst faceVertices = [];\n\n\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\tfor ( let j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst vertex = vertexData[ j ];\n\n\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\tconst vertexParts = vertex.split( '/' );\n\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\tconst v1 = faceVertices[ 0 ];\n\n\t\t\t\tfor ( let j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\tconst v2 = faceVertices[ j ];\n\t\t\t\t\tconst v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\tconst lineParts = line.substring( 1 ).trim().split( ' ' );\n\t\t\t\tlet lineVertices = [];\n\t\t\t\tconst lineUVs = [];\n\n\t\t\t\tif ( line.indexOf( '/' ) === - 1 ) {\n\n\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( let li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\tconst parts = lineParts[ li ].split( '/' );\n\n\t\t\t\t\t\tif ( parts[ 0 ] !== '' ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\tif ( parts[ 1 ] !== '' ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\tconst lineData = line.slice( 1 ).trim();\n\t\t\t\tconst pointData = lineData.split( ' ' );\n\n\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t} else if ( ( result = _object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t// o object_name\n\t\t\t\t// or\n\t\t\t\t// g group_name\n\n\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t// let name = result[ 0 ].slice( 1 ).trim();\n\t\t\t\tconst name = ( ' ' + result[ 0 ].slice( 1 ).trim() ).slice( 1 );\n\n\t\t\t\tstate.startObject( name );\n\n\t\t\t} else if ( _material_use_pattern.test( line ) ) {\n\n\t\t\t\t// material\n\n\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t} else if ( _material_library_pattern.test( line ) ) {\n\n\t\t\t\t// mtl file\n\n\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t} else if ( _map_use_pattern.test( line ) ) {\n\n\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\n\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n\n\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\n\n\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t// smooth shading\n\n\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t/*\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t *\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t * than 0.\"\n\t\t\t\t\t */\n\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\tconst value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst material = state.object.currentMaterial();\n\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t} else {\n\n\t\t\t\t// Handle null terminated files without exception\n\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.finalize();\n\n\t\tconst container = new Group();\n\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\tconst hasPrimitives = ! ( state.objects.length === 1 && state.objects[ 0 ].geometry.vertices.length === 0 );\n\n\t\tif ( hasPrimitives === true ) {\n\n\t\t\tfor ( let i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\tconst object = state.objects[ i ];\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tconst materials = object.materials;\n\t\t\t\tconst isLine = ( geometry.type === 'Line' );\n\t\t\t\tconst isPoints = ( geometry.type === 'Points' );\n\t\t\t\tlet hasVertexColors = false;\n\n\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\tconst buffergeometry = new BufferGeometry();\n\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.hasUVIndices === true ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Create materials\n\n\t\t\t\tconst createdMaterials = [];\n\n\t\t\t\tfor ( let mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\tconst sourceMaterial = materials[ mi ];\n\t\t\t\t\tconst materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n\t\t\t\t\tlet material = state.materials[ materialHash ];\n\n\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\tconst materialLine = new LineBasicMaterial();\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialLine, material );\n\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\n\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof PointsMaterial ) ) {\n\n\t\t\t\t\t\t\tconst materialPoints = new PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialPoints, material );\n\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\n\t\t\t\t\t\t\tmaterialPoints.map = material.map;\n\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmaterial = new LineBasicMaterial();\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmaterial = new PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\t\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\t\tmaterial.vertexColors = hasVertexColors;\n\n\t\t\t\t\t\tstate.materials[ materialHash ] = material;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\t// Create mesh\n\n\t\t\t\tlet mesh;\n\n\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\tfor ( let mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tconst sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = object.name;\n\n\t\t\t\tcontainer.add( mesh );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// if there is only the default parser state object with no geometry data, interpret data as point cloud\n\n\t\t\tif ( state.vertices.length > 0 ) {\n\n\t\t\t\tconst material = new PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\tconst buffergeometry = new BufferGeometry();\n\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( state.vertices, 3 ) );\n\n\t\t\t\tif ( state.colors.length > 0 && state.colors[ 0 ] !== undefined ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( state.colors, 3 ) );\n\t\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst points = new Points( buffergeometry, material );\n\t\t\t\tcontainer.add( points );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn container;\n\n\t}\n\n}\n\nexport { OBJLoader };\n"],"names":["MTLLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","url","onLoad","onProgress","onError","scope","this","path","LoaderUtils","loader","FileLoader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","Loader","baseUrl","arguments","undefined","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","create","materialName","index","createMaterial_","params","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","test","repeat","copy","scale","offset","wrapS","wrapT","encoding","sRGBEncoding","n","color","Color","fromArray","convertSRGBToLinear","specular","emissive","transparent","shininess","opacity","invertTrProperty","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","DefaultLoadingManager","getHandler","TextureLoader","texture","_object_pattern","_material_library_pattern","_material_use_pattern","_map_use_pattern","_face_vertex_data_separator_pattern","_vA","Vector3","_vB","_vC","_ab","_cb","_color","ParserState","state","objects","object","vertices","normals","colors","uvs","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","geometry","hasUVIndices","smooth","startMaterial","libraries","previous","inherited","groupCount","material","mtllib","Array","isArray","groupStart","groupEnd","clone","cloned","bind","push","end","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","len","parseInt","parseNormalIndex","parseUVIndex","addVertex","a","b","c","src","dst","addVertexPoint","addVertexLine","addNormal","addFaceNormal","subVectors","cross","normalize","x","y","z","addColor","addUV","addDefaultUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ia","ib","ic","nLen","uvLen","addPointGeometry","type","vi","l","addLineGeometry","uvi","OBJLoader","_this","replace","result","trimStart","lineFirstChar","data","setRGB","r","g","vertexData","slice","faceVertices","j","jl","vertex","vertexParts","v1","v2","v3","lineParts","lineVertices","lineUVs","li","llen","parts","pointData","exec","warn","container","Group","concat","isLine","isPoints","hasVertexColors","buffergeometry","BufferGeometry","setAttribute","Float32BufferAttribute","createdMaterials","miLen","sourceMaterial","materialHash","LineBasicMaterial","PointsMaterial","materialPoints","size","sizeAttenuation","Material","materialLine","flatShading","vertexColors","mesh","addGroup","LineSegments","Points","Mesh","add","points"],"sourceRoot":""}