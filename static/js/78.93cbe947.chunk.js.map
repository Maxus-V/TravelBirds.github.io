{"version":3,"file":"static/js/78.93cbe947.chunk.js","mappings":"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","sources":["pages/Demo/webglShader2/index.js"],"sourcesContent":["\nimport React, { useRef ,useState, useEffect } from 'react'\n\nimport { Card, Button, Tabs, Modal, List, Switch, Input, Tooltip, Drawer, Form, Radio } from 'antd'\n\nimport {\n    SearchOutlined,\n    CodeSandboxOutlined,\n    InsertRowLeftOutlined,\n    BulbOutlined,\n    FundProjectionScreenOutlined,\n} from '@ant-design/icons'\n\nimport './container.less'\n\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js'\n\nimport QRcode from \"qrcode\"\n\nlet clock, camera, scene, renderer\nlet axesHelper, pointLight\nlet geometry1, material1, mesh1\nlet materialS, mesh2, geometry\nlet uniforms1, uniforms2\n\nlet image, temp\n\nlet tempNode\n\nlet itemList = ['Slogan', 'Website', 'Phone', 'Address', 'QRcode']\n\nclock = new THREE.Clock()\n\nuniforms1 = {\n    'time': { value: 1.0 }\n}\n\nuniforms2 = {\n    'time': { value: 1.0 },\n    'colorTexture': { value: new THREE.TextureLoader().load( 'textures/disturb.jpg' ) }\n}\n\nuniforms2[ 'colorTexture' ].value.wrapS = uniforms2[ 'colorTexture' ].value.wrapT = THREE.RepeatWrapping\n\nconst params = [\n    [ 'fragment_shader1', uniforms1 ],\n    [ 'fragment_shader2', uniforms2 ],\n    [ 'fragment_shader3', uniforms1 ],\n    [ 'fragment_shader4', uniforms1 ],\n]\n\nconst params2fragmentShader = {\n    'fragment_shader1': `\n        uniform float time;\n\n        varying vec2 vUv;\n\n        void main(void) {\n\n            vec2 p = - 1.0 + 2.0 * vUv;\n            float a = time * 40.0;\n            float d, e, f, g = 1.0 / 40.0 ,h ,i ,r ,q;\n\n            e = 400.0 * ( p.x * 0.5 + 0.5 );\n            f = 400.0 * ( p.y * 0.5 + 0.5 );\n            i = 200.0 + sin( e * g + a / 150.0 ) * 20.0;\n            d = 200.0 + cos( f * g / 2.0 ) * 18.0 + cos( e * g ) * 7.0;\n            r = sqrt( pow( abs( i - e ), 2.0 ) + pow( abs( d - f ), 2.0 ) );\n            q = f / r;\n            e = ( r * cos( q ) ) - a / 2.0;\n            f = ( r * sin( q ) ) - a / 2.0;\n            d = sin( e * g ) * 176.0 + sin( e * g ) * 164.0 + r;\n            h = ( ( f + d ) + a / 2.0 ) * g;\n            i = cos( h + r * p.x / 1.3 ) * ( e + e + a ) + cos( q * g * 6.0 ) * ( r + h / 3.0 );\n            h = sin( f * g ) * 144.0 - sin( e * g ) * 212.0 * p.x;\n            h = ( h + ( f - e ) * q + sin( r - ( a + h ) / 7.0 ) * 10.0 + i / 4.0 ) * g;\n            i += cos( h * 2.3 * sin( a / 350.0 - q ) ) * 184.0 * sin( q - ( r * 4.3 + a / 12.0 ) * g ) + tan( r * g + h ) * 184.0 * cos( r * g + h );\n            i = mod( i / 5.6, 256.0 ) / 64.0;\n            if ( i < 0.0 ) i += 4.0;\n            if ( i >= 2.0 ) i = 4.0 - i;\n            d = r / 350.0;\n            d += sin( d * d * 8.0 ) * 0.52;\n            f = ( sin( a * g ) + 1.0 ) / 2.0;\n            gl_FragColor = vec4( vec3( f * i / 1.6, i / 2.0 + d / 13.0, i ) * d * p.x + vec3( i / 1.3 + d / 8.0, i / 2.0 + d / 18.0, i ) * d * ( 1.0 - p.x ), 1.0 );\n\n        }\n    `,\n    'fragment_shader2': `\n        uniform float time;\n\n        uniform sampler2D colorTexture;\n\n        varying vec2 vUv;\n\n        void main( void ) {\n\n            vec2 position = - 1.0 + 2.0 * vUv;\n\n            float a = atan( position.y, position.x );\n            float r = sqrt( dot( position, position ) );\n\n            vec2 uv;\n            uv.x = cos( a ) / r;\n            uv.y = sin( a ) / r;\n            uv /= 10.0;\n            uv += time * 0.05;\n\n            vec3 color = texture2D( colorTexture, uv ).rgb;\n\n            gl_FragColor = vec4( color * r * 1.5, 1.0 );\n\n        }\n    `,\n    'fragment_shader3': `\n        uniform float time;\n\n        varying vec2 vUv;\n\n        void main( void ) {\n\n            vec2 position = vUv;\n\n            float color = 0.0;\n            color += sin( position.x * cos( time / 15.0 ) * 80.0 ) + cos( position.y * cos( time / 15.0 ) * 10.0 );\n            color += sin( position.y * sin( time / 10.0 ) * 40.0 ) + cos( position.x * sin( time / 25.0 ) * 40.0 );\n            color += sin( position.x * sin( time / 5.0 ) * 10.0 ) + sin( position.y * sin( time / 35.0 ) * 80.0 );\n            color *= sin( time / 10.0 ) * 0.5;\n\n            gl_FragColor = vec4( vec3( color, color * 0.5, sin( color + time / 3.0 ) * 1 ), 1.0 );\n\n        }\n    `,\n    'fragment_shader4': `\n        uniform float time;\n\n        varying vec2 vUv;\n\n        void main( void ) {\n\n            vec2 position = - 1.0 + 2.0 * vUv;\n\n            float red = abs( sin( position.x * position.y + time / 5.0 ) );\n            float green = abs( sin( position.x * position.y + time / 4.0 ) );\n            float blue = abs( sin( position.x * position.y + time / 3.0 ) );\n            gl_FragColor = vec4( red, green, blue, 1.0 );\n\n        }\n    `,\n}\n\nconst num2boxSize = {\n    '0': [1, 1, 1],\n    '1': [2, 2, 2],\n    '2': [4, 4, 4],\n}\n\n\nconst WebglShader2 = () => {\n    \n    // 画布挂载\n    const threeBoxRef = useRef(null)\n    const threeBoxPlusRef = useRef(null)\n\n    // 三维设置\n    const [boxSize, setBoxSize] = useState([1, 1, 1])\n    const [boxMaterial, setBoxMaterial] = useState(0)\n    \n    const [sizeIndex, setSizeIndex] = useState(0)\n    const [materialIndex, setMaterialIndex] = useState(0)\n\n    // 组件开关\n    const [open, setOpen] = useState(false)\n    const [isModalOpen, setIsModalOpen] = useState(false)\n\n    //组件选项\n    const [arrValue, setArrValue] = useState([true, true, true, true, true])\n    const [form] = Form.useForm()\n    const [mainColor, setMainColor] = useState('red')\n    const [radioValue, setRadioValue] = useState('🍊🧃🍊🧃🍊🧃')\n\n    const [slogan, setSlogan] = useState('Eat~please~')\n    const [website, setWebsite] = useState('https://maxus-v.github.io')\n    const [phone, setPhone] = useState('020-8310-4400')\n    const [address, setAddress] = useState('Hongkong-Hollywood')\n\n    const getTextCanvas = (text1, text2, text3) => {\n        var width = 512, height = 256;\n        var canvas = document.createElement('canvas')\n        canvas.width = width\n        canvas.height = height\n        var ctx = canvas.getContext('2d')\n        // ctx.fillStyle = '#C3C3C3'\n        ctx.fillStyle = mainColor\n        ctx.fillRect(0, 0, width, height)\n        ctx.font = 30 + 'px \" bold'\n        ctx.fillStyle = 'white'\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(text1, width/2, height/1.7)\n        ctx.fillText(text2, width/2, height/1.4)\n        ctx.fillText(text3, width/2, height/1.2)\n        return canvas\n    }\n\n    const getTextCanvas1 = (value) => {\n        var width=256, height=256; \n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = mainColor\n        ctx.fillRect(0, 0, width, height);\n        ctx.drawImage(value, width/4, height/4, width/2, height/2);\n        ctx.strokeStyle = \"white\";\n        ctx.lineWidth = 4;\n        ctx.strokeRect(width/4, height/4, width/2, height/2);\n        \n        return canvas;\n    }\n\n    const getTextCanvas2 = (text) => {\n        var width = 512, height = 256;\n        var canvas = document.createElement('canvas')\n        canvas.width = width\n        canvas.height = height\n        var ctx = canvas.getContext('2d')\n        ctx.fillStyle = mainColor\n        ctx.fillRect(0, 0, width, height)\n        ctx.font = 50 + 'px \" bold'\n        ctx.fillStyle = 'white'\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(text, width/2, height/2)\n        return canvas\n    }\n\n    const createMaterialS = () => {\n        geometry = new THREE.BoxGeometry( ...boxSize )\n        materialS = [\n            new THREE.MeshBasicMaterial( { \n                map: new THREE.CanvasTexture(getTextCanvas2(radioValue)),\n             } ), //逆时针1\n            new THREE.MeshBasicMaterial( {\n                map: new THREE.CanvasTexture(getTextCanvas2(radioValue)),\n            } ),// 逆时针3\n            new THREE.MeshPhongMaterial({\n                color: mainColor\n            }),// 上方\n            new THREE.MeshBasicMaterial( { color: mainColor } ), // 下方\n            new THREE.MeshBasicMaterial( { \n                map: new THREE.CanvasTexture(getTextCanvas2(slogan)),\n             } ),  //逆时针2\n            new THREE.MeshBasicMaterial( { \n                map: new THREE.CanvasTexture(getTextCanvas(website, phone, address))\n             } ), //逆时针4\n        ] \n        changeInput2()\n        \n        mesh2 = new THREE.Mesh( geometry, materialS )\n        mesh2.position.x = 0\n        mesh2.position.y = 0\n        mesh2.position.z = 0\n        mesh2.castShadow = true\n        scene.add( mesh2 )\n    }\n\n    const init = (refCurrent) => {\n        let offsetWidth = refCurrent.parentNode.parentNode.offsetWidth\n        let offsetHeight = refCurrent.parentNode.parentNode.offsetHeight\n        camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 3000 )\n        camera.lookAt(0, 0, 0)\n        camera.position.x = 4\n        camera.position.y = 4\n\t    camera.position.z = 4\n        camera.aspect = offsetWidth / offsetHeight\n        camera.updateProjectionMatrix()\n\n        scene = new THREE.Scene()\n        scene.background = new THREE.Color( 0xffffff )\n\n        // axesHelper = new THREE.AxesHelper(150)\n        // scene.add(axesHelper)\n\n        pointLight = new THREE.SpotLight(0xffffff, 2.0)\n        pointLight.position.set(2, 2, 2)\n        pointLight.castShadow = true\n        scene.add(pointLight)\n\n        // geometry1 = new THREE.BoxGeometry( ...boxSize )\n        // material1 = new THREE.ShaderMaterial( {\n        //     uniforms: params[ boxMaterial ][ 1 ],\n        //     vertexShader: `\n        //         varying vec2 vUv;\n        //         void main()\n        //         {\n        //             vUv = uv;\n        //             vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n        //             gl_Position = projectionMatrix * mvPosition;\n        //         }\n        //     `,\n        //     fragmentShader: params2fragmentShader[ params[ boxMaterial ][ 0 ] ]\n        // } )\n        // mesh1 = new THREE.Mesh( geometry1, material1 )\n        // mesh1.position.x = 0\n        // mesh1.position.y = 0\n        // mesh1.position.z = 0\n        // scene.add( mesh1)\n\n        createMaterialS()\n\n        renderer = new THREE.WebGLRenderer({\n            antialias: true,\n        })\n        renderer.setSize( offsetWidth, offsetHeight )\n        renderer.setPixelRatio( window.devicePixelRatio )\n        renderer.shadowMap.enabled = true\n        if (refCurrent) {\n            refCurrent.innerHTML = \"\"\n            refCurrent.appendChild( renderer.domElement )\n        }\n        refCurrent.appendChild( renderer.domElement )\n\n        const controls = new OrbitControls( camera, renderer.domElement )\n        controls.enableZoom = true\n        controls.minDistance = 3\n        controls.maxDistance = 10\n        controls.target.set( 0, 0, 0 )\n        controls.update()\n\n        window.addEventListener( 'resize', onWindowResize )\n        animate()\n    }\n\n    const onWindowResize = () => {\n        const threeBox = threeBoxRef.current\n        let offsetWidth = threeBox.parentNode.parentNode.offsetWidth\n        let offsetHeight = threeBox.parentNode.parentNode.offsetHeight\n        camera.aspect = offsetWidth / offsetHeight\n        camera.updateProjectionMatrix()\n        renderer.setSize( offsetWidth, offsetHeight )\n\n    }\n\n    const animate = () => {\n        requestAnimationFrame( animate )\n        render()\n    }\n\n    const render = () => {\n        const delta = clock.getDelta()\n        uniforms1[ 'time' ].value += delta * 5\n        uniforms2[ 'time' ].value = clock.elapsedTime\n        // for ( let i = 0; i < scene.children.length; i ++ ) {\n        //     const object = scene.children[ i ]\n        //     object.rotation.y += delta * 0.5 * ( i % 2 ? 1 : - 1 )\n        //     object.rotation.x += delta * 0.5 * ( i % 2 ? - 1 : 1 )\n        // }\n        renderer.render( scene, camera )\n    }\n\n    // 三维设置\n    const setSize = (num) => {\n        setSizeIndex(num)\n        setBoxSize(num2boxSize[num])\n        mesh2.scale.set(...num2boxSize[num])\n    }\n    const setMaterial = (num) => {\n        if (num === 0) {\n            let boxGeometry = new THREE.BoxGeometry( 1, 1, 1 )\n            mesh2.geometry.dispose()\n            mesh2.geometry = boxGeometry\n        } else {\n            let cylinderGeometry = new THREE.CylinderGeometry(0.5, 0.5, 1, 32)\n            mesh2.geometry.dispose()\n            mesh2.geometry = cylinderGeometry\n        }\n    }\n\n    //组件开关\n    const showModal = () => {\n        setIsModalOpen(true)\n        const threeBoxPlus = threeBoxPlusRef.current\n        const threeBox = threeBoxRef.current\n        console.log('threeBoxPlus', threeBoxPlus, threeBox.parentNode)\n        tempNode = threeBox.parentNode\n        threeBoxPlus.appendChild(threeBox)\n        // init(threeBoxPlus)\n    }\n    const handleCancel = () => {\n        setIsModalOpen(false)\n        const threeBox = threeBoxRef.current\n        if (tempNode) tempNode.appendChild(threeBox)\n    }\n\n    //组件选项\n    const changeInput = (e, item) => {\n        let value = e.target.value\n        if (item === 'Slogan') {\n            setSlogan(value)\n        }\n        if (item === 'Website') {\n            setWebsite(value)\n        }\n        if (item === 'Phone') {\n            setPhone(value)\n        }\n        if (item === 'Address') {\n            setAddress(value)\n        }\n        // let textMesh = createText('233')\n        // scene.add(textMesh)\n        // setInputValue(e.target.value)\n        // materialS.map = new THREE.CanvasTexture(getTextCanvas(inputValue))\n        // createMaterialS(e.target.value)\n        // const threeBox = threeBoxRef.current\n        // threeBox.innerHTML = ''\n        // init(threeBox)\n    }\n\n    const test2 = (e, index) => {\n        let arr = [...arrValue]\n        arr[index] = e\n        setArrValue(arr)\n        if (itemList[index] === 'Slogan') {\n            if (e) {\n                setSlogan(form.getFieldValue().Slogan || 'Eat~please~')\n            } else {\n                setSlogan('')\n            }\n        }\n        if (itemList[index] === 'Website') {\n            if (e) {\n                setWebsite(form.getFieldValue().Website || 'https://maxus-v.github.io')\n            } else {\n                setWebsite('')\n            }\n        }\n        if (itemList[index] === 'Phone') {\n            if (e) {\n                setPhone(form.getFieldValue().Phone || '020-8310-4400')\n            } else {\n                setPhone('')\n            }\n        }\n        if (itemList[index] === 'Address') {\n            if (e) {\n                setAddress(form.getFieldValue().Address || 'Hongkong-Holloywood')\n            } else {\n                setAddress('')\n            }\n        }\n        if (itemList[index] === 'QRcode') {\n            if (e) {\n                materialS[2] = new THREE.MeshBasicMaterial( { \n                    map: temp\n                 } )\n            } else {\n                materialS[2] = new THREE.MeshBasicMaterial( { color: mainColor } )\n            }\n        }\n    }\n\n    const changeInput2 = (e) => {\n\n        QRcode.toDataURL(e && e.target && e.target.value || 'https://maxus-v.github.io', {\n            type: \"image/png\", //类型\n            quality: 0.5, //图片质量A Number between 0 and 1\n            width: 130, //高度\n            height: 130, //宽度\n            errorCorrectionLevel: \"L\", //容错率\n            margin: 2, //外边距\n            color: {\n                dark: \"#ffffff\", //前景色\n                light: mainColor //背景色\n            },\n        })\n        .then(imgData => {\n            image = new Image();\n            image.src = imgData\n            image.onload = () => {\n                temp = new THREE.CanvasTexture(getTextCanvas1(image))\n                materialS[2].map = temp\n            }\n            \n        })\n    }\n\n    const changeRadioValue = (e) => {\n        materialS[0].map = new THREE.CanvasTexture(getTextCanvas2(e.target.value))\n        materialS[1].map = new THREE.CanvasTexture(getTextCanvas2(e.target.value))\n        setRadioValue(e.target.value)\n    }\n\n    useEffect(() => {   \n        const threeBox = threeBoxRef.current\n        init(threeBox)\n        return () => {\n            threeBox.innerHTML = \"\"\n        }\n    }, [])\n\n    useEffect(() => {\n        materialS[0] = new THREE.MeshBasicMaterial( { \n            map: new THREE.CanvasTexture(getTextCanvas2(radioValue)),\n         } )\n        materialS[1] = new THREE.MeshBasicMaterial( { \n            map: new THREE.CanvasTexture(getTextCanvas2(radioValue)),\n         } )\n        materialS[3] = new THREE.MeshBasicMaterial( { color: mainColor } )\n        materialS[4] = new THREE.MeshBasicMaterial( { \n            map: new THREE.CanvasTexture(getTextCanvas2(slogan))\n        } )\n        materialS[5] = new THREE.MeshBasicMaterial( { \n            map: new THREE.CanvasTexture(getTextCanvas(website, phone, address))\n         } )\n\n\n         QRcode.toDataURL('https://maxus-v.github.io', {\n            type: \"image/png\", //类型\n            quality: 0.5, //图片质量A Number between 0 and 1\n            width: 130, //高度\n            height: 130, //宽度\n            errorCorrectionLevel: \"L\", //容错率\n            margin: 2, //外边距\n            color: {\n                dark: \"#ffffff\", //前景色\n                light: mainColor //背景色\n            },\n        })\n        .then(imgData => {\n            image = new Image();\n            image.src = imgData\n            image.onload = () => {\n                materialS[2] = new THREE.MeshBasicMaterial( { \n                    map: new THREE.CanvasTexture(getTextCanvas1(image))\n                 } )\n            }\n            \n        })\n\n    }, [mainColor, website, phone, address, slogan])\n\n    return <div className='displayingArea'>\n            <div className='leftArea'>\n                <Card\n                    title=\"Displaying Effect\"\n                    headStyle={{\n                        fontSize: '22px',\n                        textAlign: 'left',\n                        color: '#1677ff',\n                        border: 'none'\n                    }}\n                    style={{\n                        width: 300,\n                        height: 300,\n                        border: 'none'\n                    }}\n                    extra={\n                        <Tooltip title=\"Change the viewer\" color={'#1677ff'}>\n                            <Button icon={<SearchOutlined />} onClick={showModal} />\n                        </Tooltip>\n                    }\n                    actions={[\n                        <p style={{color: '#1677ff', fontSize: '18px'}}>\n                            webglShader2\n                        </p>\n                    ]}\n                >\n                    <div ref={threeBoxRef}></div>\n                </Card>\n            </div>\n            \n            <div className='rightArea'>\n                <Tabs\n                    defaultActiveKey=\"1\"\n                    items={[\n                        {\n                            key: '1',\n                            label: <div className='icon1'>\n                                        <CodeSandboxOutlined />\n                                        <p>Standards</p>\n                                    </div>,\n                            children: <List\n                                        bordered\n                                        size=\"large\"\n                                        style={{textAlign: 'left', boxSizing: 'border-box'}}\n                                        header={<h1 style={{fontSize: '16px', fontWeight: 'bold'}}>Choose Size</h1>}\n                                        dataSource={[\n                                            <div>#1 SMALL (1*1*1)</div>,\n                                            <div>#2 MIDDLE (2*2*2)</div>,\n                                            <div>#3 BIG (4*4*4)</div>\n                                        ]}\n                                        renderItem={(item, index) => <List.Item \n                                            onClick={() => setSize(index)} \n                                            style={index == sizeIndex ? {border: '2px solid #1677ff', borderRadius: '4px'} : {cursor: 'pointer'}}\n                                        >\n                                            {item}\n                                        </List.Item>}\n                                    />,\n                        },\n                        {\n                            label: <div className='icon2'>\n                                        <InsertRowLeftOutlined />\n                                        <p>Templates</p>\n                                    </div>,\n                            key: '2',\n                            children: <List\n                                        bordered\n                                        size=\"large\"\n                                        style={{textAlign: 'left', boxSizing: 'border-box'}}\n                                        header={<h1 style={{fontSize: '16px', fontWeight: 'bold'}}>Choose Material</h1>}\n                                        dataSource={[\n                                            <div>#1 BoxGeometry</div>,\n                                            <div>#2 CylinderGeometry</div>,\n                                            // <div>#3 Material3</div>,\n                                            // <div>#4 Material4</div>\n                                        ]}\n                                        renderItem={(item, index) => <List.Item \n                                            onClick={() => setMaterial(index)} style={index == materialIndex ? {border: '2px solid #1677ff', borderRadius: '4px'}: {cursor: 'pointer'}}\n                                        >\n                                            {item}\n                                        </List.Item>}\n                                    />,\n                        },\n                        {\n                            label: <div className='icon3'>\n                                        <BulbOutlined />\n                                        <p>Design</p>\n                                    </div>,\n                            key: '3',\n                            children: <div style={{fontWeight: 'bold', textAlign: 'left', display: 'flex', flexDirection: 'column'}}>\n                                        <div style={{display: 'flex', justifyContent: 'space-between', marginBottom: '10px'}}>\n                                            <div>\n                                                <h1>Main color</h1>\n                                                <div \n                                                    onClick={() => setOpen(true)} \n                                                    style={{width: '200px', height: '30px', borderRadius: '4px', backgroundColor: mainColor, cursor:'pointer'}}\n                                                >\n                                                </div>\n                                            </div>\n                                            <div>\n                                                <h1>Secondary Color</h1>\n                                                <div \n                                                    onClick={() => setOpen(true)} \n                                                    style={{width: '200px', height: '30px', borderRadius: '4px', backgroundColor: mainColor, cursor:'pointer'}}\n                                                >\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div>\n                                            <h1>Select test logo</h1>\n                                            <Radio.Group onChange={changeRadioValue} value={radioValue}>\n                                                <Radio value={'🍊🧃🍊🧃🍊🧃'}>Juice</Radio>\n                                                <Radio value={'🐂🥛🐂🥛🐂🥛'}>Milk</Radio>\n                                            </Radio.Group>\n                                        </div>\n                                    </div>,\n                        },\n                        {\n                            label: <div className='icon4'>\n                                        <FundProjectionScreenOutlined />\n                                        <p>Information</p>\n                                    </div>,\n                            key: '4',\n                            children: <Form form={form} layout=\"vertical\">\n                                {\n                                    ['Slogan', 'Website', 'Phone', 'Address', 'QRcode'].map((item, index) => {\n                                        return <Form.Item \n                                                    key={item} \n                                                    name={item} \n                                                    label={<div>\n                                                                <span>{item} </span>\n                                                                <Switch checked={arrValue[index]} onChange={(e) => test2(e, index)} />\n                                                            </div>\n                                                    }\n                                                >\n                                                    <Input \n                                                        disabled={arrValue[index]? false : true} \n                                                        placeholder={'Your ' + item}\n                                                        onChange={item === 'QRcode' ? changeInput2 : (e) => changeInput(e, item)}\n                                                    />\n                                                </Form.Item>\n                                    })\n                                }\n                            </Form>\n                        },\n                    ]}\n                />\n            </div>\n\n            <Drawer title=\"Recommend Color\" width={500} onClose={() => setOpen(false)} open={open} closable={false}>\n                {\n                    ['red', 'yellow', 'blue'].map(item => {\n                        return <React.Fragment key={item}>\n                            <div>{item}</div>\n                            <div onClick={() => setMainColor(item)} style={{width: '50px', height: '50px', backgroundColor: item, cursor: 'pointer'}}></div>\n                        </React.Fragment>\n                    })\n                }\n            </Drawer>\n\n            <Modal\n                footer={null}\n                open={isModalOpen}\n                onCancel={handleCancel} \n                forceRender=\"true\"\n                width={1000}\n                bodyStyle={{\n                    height: '600px',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                }}\n            >\n                <div ref={threeBoxPlusRef}></div>\n            </Modal>\n        </div>\n}\n\nexport default WebglShader2"],"names":["camera","scene","renderer","materialS","mesh2","geometry","image","temp","tempNode","itemList","clock","THREE","uniforms1","value","uniforms2","load","num2boxSize","wrapS","wrapT","getTextCanvas1","canvas","document","createElement","ctx","width","height","getContext","fillStyle","mainColor","fillRect","drawImage","strokeStyle","lineWidth","strokeRect","onWindowResize","offsetWidth","threeBox","threeBoxRef","current","parentNode","offsetHeight","aspect","updateProjectionMatrix","setSize","animate","requestAnimationFrame","render","useRef","threeBoxPlusRef","_useState","useState","boxSize","_useState2","_slicedToArray","setBoxSize","sizeIndex","_useState3","_useState5","_useState4","_useState6","setSizeIndex","materialIndex","_useState7","_useState8","open","_useState9","_useState10","setOpen","isModalOpen","_useState11","_useState12","setIsModalOpen","arrValue","_useState13","_useState14","setArrValue","form","_Form$useForm","Form","_useState15","_useState16","setMainColor","radioValue","_useState17","_useState18","setRadioValue","slogan","_useState19","_useState20","setSlogan","website","_useState21","_useState22","setWebsite","phone","_useState23","_useState24","setPhone","address","_useState25","_useState26","setAddress","getTextCanvas","text1","text2","text3","font","textAlign","textBaseline","fillText","getTextCanvas2","text","delta","getDelta","elapsedTime","changeInput2","e","QRcode","target","type","quality","errorCorrectionLevel","margin","color","dark","light","then","imgData","Image","src","onload","map","useEffect","refCurrent","window","innerWidth","innerHeight","lookAt","position","x","y","z","background","pointLight","set","castShadow","add","_construct","_toConsumableArray","antialias","setPixelRatio","devicePixelRatio","shadowMap","enabled","innerHTML","appendChild","domElement","controls","OrbitControls","enableZoom","minDistance","maxDistance","update","addEventListener","init","_jsxs","className","children","_jsx","Card","title","headStyle","fontSize","border","style","extra","Tooltip","Button","icon","SearchOutlined","onClick","threeBoxPlus","actions","ref","Tabs","defaultActiveKey","items","key","label","CodeSandboxOutlined","List","bordered","size","boxSizing","header","fontWeight","dataSource","renderItem","item","index","num","_mesh2$scale","scale","apply","borderRadius","cursor","InsertRowLeftOutlined","boxGeometry","dispose","cylinderGeometry","BulbOutlined","display","flexDirection","justifyContent","marginBottom","backgroundColor","Radio","onChange","FundProjectionScreenOutlined","layout","name","Switch","checked","arr","getFieldValue","Slogan","Website","Phone","Address","Input","disabled","placeholder","changeInput","Drawer","onClose","closable","React","Modal","footer","onCancel","forceRender","bodyStyle","alignItems"],"sourceRoot":""}