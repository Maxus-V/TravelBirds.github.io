{"version":3,"file":"static/js/761.b36a90fe.chunk.js","mappings":"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","sources":["hooks/use3D.js","pages/ThreeDimension/components/Soldier.js","pages/ThreeDimension/components/RobotExpressive.js","pages/ThreeDimension/components/Xbot.js","pages/ThreeDimension/index.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\"\n\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js'\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js'\nimport * as SkeletonUtils from 'three/addons/utils/SkeletonUtils.js'\n\nexport const use3D = (name, options, data) => {\n    const myCanvas = useRef(null)\n    let camera, scene, renderer, clock\n    const mixers = []\n    const init = (canvasContainer) => {\n        camera = new THREE.PerspectiveCamera( 45, 1, 0.25, 100 )\n        camera.position.set( - 1, 4, 12 )\n        camera.lookAt( 0, 2, 0 )\n\n        scene = new THREE.Scene()\n        scene.background = new THREE.Color( 0xa0a0a0 )\n        scene.fog = new THREE.Fog( 0xa0a0a0, 10, 50 )\n\n        clock = new THREE.Clock()\n\n        const hemiLight = new THREE.HemisphereLight( 0xffffff, 0x444444 )\n        hemiLight.position.set( 0, 20, 0 )\n        scene.add( hemiLight )\n\n        const dirLight = new THREE.DirectionalLight( 0xffffff )\n        dirLight.position.set( 0, 20, 10 )\n        dirLight.castShadow = true\n        dirLight.shadow.camera.top = 4\n        dirLight.shadow.camera.bottom = - 4\n        dirLight.shadow.camera.left = - 4\n        dirLight.shadow.camera.right = 4\n        dirLight.shadow.camera.near = 0.1\n        dirLight.shadow.camera.far = 40\n        scene.add( dirLight )\n\n        const mesh = new THREE.Mesh( new THREE.PlaneGeometry( 200, 200 ), new THREE.MeshPhongMaterial( { color: 0x999999, depthWrite: false } ) )\n        mesh.rotation.x = - Math.PI / 2\n        mesh.receiveShadow = true\n        scene.add( mesh )\n\n        const grid = new THREE.GridHelper( 200, 40, 0x000000, 0x000000 )\n\t\tgrid.material.opacity = 0.2\n\t\tgrid.material.transparent = true\n\t\tscene.add( grid )\n\n        const loader = new GLTFLoader()\n        loader.load(`models/${name}.glb`, (gltf) => {\n        gltf.scene.traverse( ( object ) => {\n            if ( object.isMesh ) object.castShadow = true\n        } )\n        const model1 = SkeletonUtils.clone( gltf.scene )\n        const mixer1 = new THREE.AnimationMixer( model1 )\n        mixer1.clipAction( gltf.animations[ 2 ] ).play()\n        model1.position.z = 4\n        scene.add( model1 )\n        mixers.push( mixer1 )\n        animate()\n    }, undefined, (e) => {\n        console.error(e)\n    })\n\n    renderer = new THREE.WebGLRenderer( { antialias: true } )\n    renderer.setPixelRatio( window.devicePixelRatio )\n    renderer.setSize( 400, 400 )\n    renderer.outputEncoding = THREE.sRGBEncoding\n    renderer.shadowMap.enabled = true \n    canvasContainer.appendChild( renderer.domElement )\n\n    window.addEventListener( 'resize', onWindowResize )\n\n    const controls = new OrbitControls( camera, renderer.domElement )\n    controls.enablePan = false\n    controls.enableZoom = false\n    controls.target.set( 0, 1, 0 )\n    controls.update()\n    }\n\n    const onWindowResize = () => {\n        camera.aspect = 1\n        camera.updateProjectionMatrix()\n        renderer.setSize( 400, 400 )\n    }\n\n    const animate = () => {\n        const delta = clock.getDelta()\n        for ( const mixer of mixers ) mixer.update( delta )\n        requestAnimationFrame( animate )\n        renderer.render( scene, camera )\n    }\n    useEffect(() => {\n        let my_canvas = myCanvas.current\n        init(my_canvas)\n        animate()\n        return () => {\n            my_canvas.innerHTML = \"\"\n        }\n    }, [])\n    return {\n        [`${name}Canvas`]:myCanvas\n    }\n}","import { use3D } from \"@/hooks/use3D\"\n\nconst Soldier = (props) => {\n    const {SoldierCanvas} = use3D('Soldier')\n    return (\n        <div className=\"container\">\n            <div ref={SoldierCanvas}></div>\n        </div>\n    )\n}\n\nexport default Soldier","import { use3D } from \"@/hooks/use3D\"\n\nconst RobotExpressive = (props) => {\n    const {RobotExpressiveCanvas} = use3D('RobotExpressive')\n    return (\n        <div className=\"container\">\n            <div ref={RobotExpressiveCanvas}></div>\n        </div>\n    )\n}\n\nexport default RobotExpressive","import { use3D } from \"@/hooks/use3D\"\n\nconst Xbot = (props) => {\n    const {XbotCanvas} = use3D('Xbot')\n    return (\n        <div className=\"container\">\n            <div ref={XbotCanvas}></div>\n        </div>\n    )\n}\n\nexport default Xbot","\nimport Soldier from \"./components/Soldier\"\nimport RobotExpressive from \"./components/RobotExpressive\"\nimport Xbot from './components/Xbot'\n\nimport './ThreeDimension.less'\n\nconst ThreeDimension = (props) => {\n    return (\n        <div className=\"threeDimension\">\n            <h1> 3D 操作台</h1>\n            <div className=\"models\">\n                <Soldier />\n                <RobotExpressive />\n                <Xbot />\n            </div>\n        </div>\n    )\n}\n\nexport default ThreeDimension"],"names":["use3D","name","options","data","camera","scene","renderer","clock","myCanvas","useRef","mixers","onWindowResize","aspect","updateProjectionMatrix","setSize","animate","delta","getDelta","_i","_mixers","length","update","requestAnimationFrame","render","useEffect","my_canvas","current","canvasContainer","THREE","position","set","lookAt","background","fog","hemiLight","add","dirLight","castShadow","shadow","top","bottom","left","right","near","far","mesh","color","depthWrite","rotation","x","Math","PI","receiveShadow","grid","material","opacity","transparent","GLTFLoader","load","concat","gltf","traverse","object","isMesh","model1","SkeletonUtils","mixer1","clipAction","animations","play","z","push","undefined","e","console","error","antialias","setPixelRatio","window","devicePixelRatio","outputEncoding","shadowMap","enabled","appendChild","domElement","addEventListener","controls","OrbitControls","enablePan","enableZoom","target","init","innerHTML","_defineProperty","props","SoldierCanvas","_jsx","className","children","ref","RobotExpressiveCanvas","XbotCanvas","_jsxs","Soldier","RobotExpressive","Xbot"],"sourceRoot":""}